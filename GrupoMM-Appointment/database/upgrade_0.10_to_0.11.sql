-- Modificamos a tabela de marcas de equipamento para suportar o uso em
-- conjunto com acessórios
ALTER TABLE erp.equipmentBrands
  ADD COLUMN madeTracker boolean NOT NULL DEFAULT true;
ALTER TABLE erp.equipmentBrands
  ADD COLUMN madeAccessory boolean NOT NULL DEFAULT false;

INSERT INTO erp.equipmentBrands (equipmentBrandID, contractorID, name,
  madeTracker, madeAccessory) VALUES
  (12, 1, 'SGBras', false, true);

ALTER SEQUENCE erp.equipmentbrands_equipmentbrandid_seq RESTART WITH 13;

UPDATE erp.equipmentBrands
   SET madeAccessory = true
 WHERE equipmentBrandID = 1;

-- Modificamos a tabela de modelos de equipametnos para acrescentar as
-- novas características
ALTER TABLE erp.equipmentModels
  ADD COLUMN analogInput smallint NOT NULL DEFAULT 0;
ALTER TABLE erp.equipmentModels
  ADD COLUMN analogOutput smallint NOT NULL DEFAULT 0;
ALTER TABLE erp.equipmentModels
  ADD COLUMN digitalInput smallint NOT NULL DEFAULT 0;
ALTER TABLE erp.equipmentModels
  ADD COLUMN digitalOutput smallint NOT NULL DEFAULT 0;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasRFModule boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasOnOffButton boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasBoxOpenSensor boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasIbuttonInput boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasAntiJammer boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasRPMInput boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasOdometerInput boolean NOT NULL DEFAULT false;
ALTER TABLE erp.equipmentModels
  ADD COLUMN hasAccelerometer boolean NOT NULL DEFAULT false;

CREATE TABLE IF NOT EXISTS erp.accessoryTypes (
  accessoryTypeID serial,      -- O ID do tipo de acessório
  name            varchar(50)  -- O nome do tipo de acessório
                  NOT NULL,
  description     text         -- A descrição do tipo de acessório
                  NOT NULL,
  PRIMARY KEY (accessoryTypeID)
);

INSERT INTO erp.accessoryTypes (accessoryTypeID, name, description) VALUES
  (1, 'Botão de pânico',
    'Permite o envio de situações de pânico.'),
  (2, 'Leitora de iButton',
    'Permite a leitura de dispositivos iButton de forma a identificar ' ||
    'o motorista que está na direção do veículo.'),
  (3, 'Teclado',
    'O terminal de dados, é dotado de macros pré definidas, e reúne ' ||
    'todas as necessidades de informação para a jornada de trabalho, ' ||
    'com a facilidade de um toque. Permite a identificação do ' ||
    'motorista que está na direção do veículo e bloquear o uso para ' ||
    'motoristas não cadastrados.'),
  (4, 'Sensor de temperatura',
    'Permite monitorar e transportar com maior segurança recursos que ' ||
    'necessitam do controle térmico. O controle da temperatura reduz ' ||
    'as chances de haver perda de produtos, garantindo a entrega até ' ||
    'o destino final.'),
  (5, 'Sensor de plataforma',
    'Permite monitorar quando a plataforma do seu guincho é acionada.'),
  (6, 'Sensor de caçamba',
    'Permite monitorar quando a caçamba é acionada.'),
  (7, 'Sensor de porta',
    'É utilizado para identificar movimentação, seja de abertura e/ou ' ||
    'fechamento da porta do veículo.'),
  (8, 'Sensor de engate e desengate para carretas',
    'Tem como finalidade identificar e disponibilizar a informação de ' ||
    'que a “carreta” foi desengatada do “cavalo”.'),
  (9, 'Sensor de velocidade na chuva',
    'Receba os alertas de velocidades em pista molhada, quando o ' ||
    'motorista ligar o limpador o rastreador recebera o sinal e ' ||
    'começara a calcular a velocidade de acordo com os parâmetros ' ||
    'pré estabelecidos para pista molhada');

ALTER SEQUENCE erp.accessorytypes_accessorytypeid_seq RESTART WITH 10;

-- Adicionamos a chave extrangeira para as marcas na tabela de modelos
-- de equipamento
ALTER TABLE erp.equipmentModels
  ADD CONSTRAINT equipmentmodels_equipmentbrandid_fkey
      FOREIGN KEY (equipmentBrandID)
        REFERENCES erp.equipmentBrands(equipmentBrandID)
        ON DELETE CASCADE;


-- ---------------------------------------------------------------------
-- Características técnicas
-- ---------------------------------------------------------------------
-- Armazena as informações de características técnicas que um equipamento
-- de rastreamento deve ter para que o mesmo atenda os requisitos de um
-- contrato.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.features (
  featureID           serial,         -- O ID da característica
  name                varchar(50)     -- O nome da característica
                      NOT NULL,
  needAnalogInput     boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de entrada analógica
  needAnalogOutput    boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de saída analógica
  needDigitalInput    boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de entrada digital
  needDigitalOutput   boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de saída digital
  needRFModule        boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- do módulo RF
  needOnOffButton     boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de botão liga/desliga
  needBoxOpenSensor   boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de sensor de caixa aberta
  needRS232Interface  boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- da interface RS232
  needIbuttonInput    boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de entrada iButton
  needAntiJammer      boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de um anti-jammer
  needRPMInput        boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de entrada RPM física
  needOdometerInput   boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de entrada para Odômetro física
  needAccelerometer   boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de um sensor de acelerômetro
  needAccessory       boolean         -- O indicativo de que necessita
                      DEFAULT false,  -- de um acessório
  accessoryTypeID     integer         -- O tipo de acessório requerido
                      DEFAULT NULL
                      CHECK ( (NOT needAccessory) OR (accessoryTypeID IS NOT NULL) ),
  PRIMARY KEY (featureID),
  FOREIGN KEY (accessoryTypeID)
    REFERENCES erp.accessoryTypes(accessoryTypeID)
    ON DELETE RESTRICT
);

-- Insere as características
INSERT INTO erp.features (featureID, name, needAnalogInput,
  needAnalogOutput, needDigitalInput, needDigitalOutput, needRFModule,
  needOnOffButton, needBoxOpenSensor, needRS232Interface,
  needIbuttonInput, needAntiJammer, needRPMInput, needOdometerInput,
  needAccelerometer, needAccessory, accessoryTypeID) VALUES
  (1, 'Acelerômetro', false, false, false, false, false, false, false, false, false, false, false, false, true, false, NULL),
  (2, 'Anti Jammer', false, false, false, false, false, false, false, false, false, true, false, false, false, false, NULL),
  (3, 'Bloqueio', false, false, false, true, false, false, false, false, false, false, false, false, false, false, NULL),
  (4, 'Botão de pânico', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 1),
  (5, 'Controle de RPM', false, false, false, false, false, false, false, false, false, false, true, false, false, false, NULL),
  (6, 'Controle de velocidade', false, false, false, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (7, 'Estado da ignição', false, false, false, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (8, 'Horímetro físico', false, false, true, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (9, 'Horímetro por GPS', false, false, false, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (10, 'Leitora de iButton', false, false, false, false, false, false, false, false, true, false, false, false, false, true, 2),
  (11, 'Localização', false, false, false, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (12, 'Odômetro físico', false, false, false, false, false, false, false, false, false, false, false, true, false, false, NULL),
  (13, 'Odômetro por GPS', false, false, false, false, false, false, false, false, false, false, false, false, false, false, NULL),
  (14, 'Sensor de caçamba', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 6),
  (15, 'Sensor de engate e desengate para carretas', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 8),
  (16, 'Sensor de plataforma', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 5),
  (17, 'Sensor de porta', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 7),
  (18, 'Sensor de temperatura', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 4),
  (19, 'Sensor de velocidade na chuva', false, false, true, false, false, false, false, false, false, false, false, false, false, true, 9),
  (20, 'Teclado', false, false, false, false, false, false, false, true, false, false, false, false, false, true, 3),
  (21, 'Telemetria', false, false, false, false, false, false, false, false, false, false, true, true, true, false, NULL);

ALTER SEQUENCE erp.features_featureid_seq RESTART WITH 22;


-- ---------------------------------------------------------------------
-- Indicadores Financeiros
-- ---------------------------------------------------------------------
-- Armazena os indicadores financeiros.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.indicators (
  indicatorID  serial,      -- O ID do indicador financeiro
  name         varchar(10)  -- O nome do indicador financeiro
               NOT NULL,
  institute    varchar(10)  -- A sigla do instituto responsável pelo
               NOT NULL,    -- indicador
  PRIMARY KEY (indicatorID)
);

-- Insere os indicadores financeiros
INSERT INTO erp.indicators (indicatorID, name, institute) VALUES
  (1, 'IGP-DI', 'FGV'),
  (2, 'IGP-M', 'FGV'),
  (3, 'INPC', 'IBGE'),
  (4, 'IPC', 'FIPE'),
  (5, 'IPCA', 'IBGE');

ALTER SEQUENCE erp.indicators_indicatorid_seq RESTART WITH 6;

-- ---------------------------------------------------------------------
-- Valores acumulados por indicador financeiro
-- ---------------------------------------------------------------------
-- Armazena os valores acumulados nos últimos 12 meses para cada
-- indicador, mês a mês
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.accumulatedValues (
  accumulatedValueID  serial,       -- O ID do valor acumulado
  indicatorID         integer       -- O ID do indicador financeiro
                      NOT NULL,
  month               smallint      -- O número do mês do valor acumulado
                      NOT NULL
                      CHECK (month BETWEEN 1 AND 12),
  year                char(4)       -- O ano do valor acumulado
                      NOT NULL,
  value               numeric(8,4)  -- O valor acumulado nos últimos
                      NOT NULL,     -- 12 meses
  PRIMARY KEY (accumulatedValueID),
  UNIQUE (indicatorID, month, year),
  FOREIGN KEY (indicatorID)
    REFERENCES erp.indicators(indicatorID)
    ON DELETE CASCADE
);

-- Atenção:
-- 
-- Para determinar o fator de multiplicação que é utilizado para se
-- aplicar um índice de reajuste num valor de contrato, usamos a
-- fórmula abaixo no SELECT:
--   round(sign(value) * (1 + @value/100), 6) AS multiplier
--   
-- SELECT i.name, i.institute, a.month || '/' || a.year AS reference, a.value, round(sign(a.value) * (1 + @a.value/100), 6) AS multiplier FROM erp.indicators AS i INNER JOIN erp.accumulatedValues AS a USING (indicatorid) ORDER BY a.year DESC, a.month DESC, i.name;


-- Insere os valores acumulados para cada indicador financeiro

-- IGP-DI
INSERT INTO erp.accumulatedValues (indicatorID, month, year, value) VALUES
  (1, 01, '2004',  6.2194),
  (1, 02, '2004',  5.6861),
  (1, 03, '2004',  4.9272),
  (1, 04, '2004',  5.7005),
  (1, 05, '2004',  7.9671),
  (1, 06, '2004', 10.1308),
  (1, 07, '2004', 11.6095),
  (1, 08, '2004', 12.3749),
  (1, 09, '2004', 11.7410),
  (1, 10, '2004', 11.8411),
  (1, 11, '2004', 12.2196),
  (1, 12, '2004', 12.1303),
  (1, 01, '2005', 11.6075),
  (1, 02, '2005', 10.8567),
  (1, 03, '2005', 10.9226),
  (1, 04, '2005', 10.2207),
  (1, 05, '2005',  8.3631),
  (1, 06, '2005',  6.5016),
  (1, 07, '2005',  4.8800),
  (1, 08, '2005',  2.7060),
  (1, 09, '2005',  2.0824),
  (1, 10, '2005',  2.1840),
  (1, 11, '2005',  1.6874),
  (1, 12, '2005',  1.2321),
  (1, 01, '2006',  1.6256),
  (1, 02, '2006',  1.1600),
  (1, 03, '2006', -0.2824),
  (1, 04, '2006', -0.7685),
  (1, 05, '2006', -0.1418),
  (1, 06, '2006',  0.9816),
  (1, 07, '2006',  1.5596),
  (1, 08, '2006',  2.7880),
  (1, 09, '2006',  3.1688),
  (1, 10, '2006',  3.3533),
  (1, 11, '2006',  3.6006),
  (1, 12, '2006',  3.7973),
  (1, 01, '2007',  3.4984),
  (1, 02, '2007',  3.7987),
  (1, 03, '2007',  4.4973),
  (1, 04, '2007',  4.6227),
  (1, 05, '2007',  4.3934),
  (1, 06, '2007',  3.9682),
  (1, 07, '2007',  4.1758),
  (1, 08, '2007',  5.1926),
  (1, 09, '2007',  6.1685),
  (1, 10, '2007',  6.1053),
  (1, 11, '2007',  6.6116),
  (1, 12, '2007',  7.8984),
  (1, 01, '2008',  8.5000),
  (1, 02, '2008',  8.6624),
  (1, 03, '2008',  9.1829),
  (1, 04, '2008', 10.2514),
  (1, 05, '2008', 12.1447),
  (1, 06, '2008', 13.9679),
  (1, 07, '2008', 14.8195),
  (1, 08, '2008', 12.8150),
  (1, 09, '2008', 11.9118),
  (1, 10, '2008', 12.2895),
  (1, 11, '2008', 11.2005),
  (1, 12, '2008',  9.1073),
  (1, 01, '2009',  8.0485),
  (1, 02, '2009',  7.4996),
  (1, 03, '2009',  5.8556),
  (1, 04, '2009',  4.7250),
  (1, 05, '2009',  2.9775),
  (1, 06, '2009',  0.7439),
  (1, 07, '2009', -1.0095),
  (1, 08, '2009', -0.5425),
  (1, 09, '2009', -0.6515),
  (1, 10, '2009', -1.7620),
  (1, 11, '2009', -1.7620),
  (1, 12, '2009', -1.4364),
  (1, 01, '2010', -0.4509),
  (1, 02, '2010',  0.7652),
  (1, 03, '2010',  2.2590),
  (1, 04, '2010',  2.9540),
  (1, 05, '2010',  4.3826),
  (1, 06, '2010',  5.0737),
  (1, 07, '2010',  5.9832),
  (1, 08, '2010',  7.0526),
  (1, 09, '2010',  7.9603),
  (1, 10, '2010',  9.1160),
  (1, 11, '2010', 10.7625),
  (1, 12, '2010', 11.3058),
  (1, 01, '2011', 11.2727),
  (1, 02, '2011', 11.1296),
  (1, 03, '2011', 11.1076),
  (1, 04, '2011', 10.8649),
  (1, 05, '2011',  9.1621),
  (1, 06, '2011',  8.6508),
  (1, 07, '2011',  8.3581),
  (1, 08, '2011',  7.8329),
  (1, 09, '2011',  7.4596),
  (1, 10, '2011',  6.7895),
  (1, 11, '2011',  5.5805),
  (1, 12, '2011',  5.0125),
  (1, 01, '2012',  4.3054),
  (1, 02, '2012',  3.3859),
  (1, 03, '2012',  3.3345),
  (1, 04, '2012',  3.8692),
  (1, 05, '2012',  4.8039),
  (1, 06, '2012',  5.6644),
  (1, 07, '2012',  7.3242),
  (1, 08, '2012',  8.0496),
  (1, 09, '2012',  8.1890),
  (1, 10, '2012',  7.4239),
  (1, 11, '2012',  7.2314),
  (1, 12, '2012',  8.1121),
  (1, 01, '2013',  8.1228),
  (1, 02, '2013',  8.2633),
  (1, 03, '2013',  7.9942),
  (1, 04, '2013',  6.8396),
  (1, 05, '2013',  6.2149),
  (1, 06, '2013',  6.2888),
  (1, 07, '2013',  4.8439),
  (1, 08, '2013',  3.9848),
  (1, 09, '2013',  4.4796),
  (1, 10, '2013',  5.4648),
  (1, 11, '2013',  5.4963),
  (1, 12, '2013',  5.5278),
  (1, 01, '2014',  5.6224),
  (1, 02, '2014',  6.3076),
  (1, 03, '2014',  7.5476),
  (1, 04, '2014',  8.0964),
  (1, 05, '2014',  7.2667),
  (1, 06, '2014',  5.7869),
  (1, 07, '2014',  5.0580),
  (1, 08, '2014',  4.6397),
  (1, 09, '2014',  3.2564),
  (1, 10, '2014',  3.2153),
  (1, 11, '2014',  4.1005),
  (1, 12, '2014',  3.7800),
  (1, 01, '2015',  4.0590),
  (1, 02, '2015',  3.7289),
  (1, 03, '2015',  3.4529),
  (1, 04, '2015',  3.9370),
  (1, 05, '2015',  4.8244),
  (1, 06, '2015',  6.2063),
  (1, 07, '2015',  7.4131),
  (1, 08, '2015',  7.7781),
  (1, 09, '2015',  9.2867),
  (1, 10, '2015', 10.5578),
  (1, 11, '2015', 10.6125),
  (1, 12, '2015', 10.6786),
  (1, 01, '2016', 11.6241),
  (1, 02, '2016', 11.9128),
  (1, 03, '2016', 11.0503),
  (1, 04, '2016', 10.4341),
  (1, 05, '2016', 11.2371),
  (1, 06, '2016', 12.2867),
  (1, 07, '2016', 11.2038),
  (1, 08, '2016', 11.2370),
  (1, 09, '2016',  9.7125),
  (1, 10, '2016',  7.9551),
  (1, 11, '2016',  6.7389),
  (1, 12, '2016',  7.1533),
  (1, 01, '2017',  5.9924),
  (1, 02, '2017',  5.2247),
  (1, 03, '2017',  4.3760),
  (1, 04, '2017',  2.7120),
  (1, 05, '2017',  1.0464),
  (1, 06, '2017', -1.5288),
  (1, 07, '2017', -1.4398),
  (1, 08, '2017', -1.6263),
  (1, 09, '2017', -1.0460),
  (1, 10, '2017', -1.0757),
  (1, 11, '2017', -0.3341),
  (1, 12, '2017', -0.4231),
  (1, 01, '2018', -0.2743),
  (1, 02, '2018', -0.1846),
  (1, 03, '2018',  0.7572),
  (1, 04, '2018',  2.9711),
  (1, 05, '2018',  5.1963),
  (1, 06, '2018',  7.7880),
  (1, 07, '2018',  8.5880),
  (1, 08, '2018',  9.0647),
  (1, 09, '2018', 10.3328),
  (1, 10, '2018', 10.5092),
  (1, 11, '2018',  8.3823),
  (1, 12, '2018',  7.1021),
  (1, 01, '2019',  6.5590),
  (1, 02, '2019',  7.7294),
  (1, 03, '2019',  8.2757),
  (1, 04, '2019',  8.2436),
  (1, 05, '2019',  6.9230),
  (1, 06, '2019',  6.0274),
  (1, 07, '2019',  5.5524),
  (1, 08, '2019',  4.3048),
  (1, 09, '2019',  2.9829),
  (1, 10, '2019',  3.2808),
  (1, 11, '2019',  5.3598),
  (1, 12, '2019',  7.6776),
  (1, 01, '2020',  7.6991),
  (1, 02, '2020',  6.3801),
  (1, 03, '2020',  6.9801),
  (1, 04, '2020',  6.0789),
  (1, 05, '2020',  6.7868),
  (1, 06, '2020',  7.8161),
  (1, 07, '2020', 10.3500),
  (1, 08, '2020', 15.2081),
  (1, 09, '2020', 18.4179),
  (1, 10, '2020', 14.7804),
  (1, 11, '2020', 24.2714),
  (1, 12, '2020', 23.0743),
  (1, 01, '2021', 26.5419),
  (1, 02, '2021', 29.9582),
  (1, 03, '2021', 30.6359),
  (1, 04, '2021', 33.4692),
  (1, 05, '2021', 36.5462),
  (1, 06, '2021', 34.5437);

-- IGP-M
INSERT INTO erp.accumulatedValues (indicatorID, month, year, value) VALUES
  (2, 01, '2004',  7.1512),
  (2, 02, '2004',  5.4855),
  (2, 03, '2004',  5.0699),
  (2, 04, '2004',  5.3718),
  (2, 05, '2004',  7.0305),
  (2, 06, '2004',  9.6036),
  (2, 07, '2004', 11.5077),
  (2, 08, '2004', 12.4408),
  (2, 09, '2004', 11.8963),
  (2, 10, '2004', 11.9074),
  (2, 11, '2004', 12.2749),
  (2, 12, '2004', 12.4200),
  (2, 01, '2005', 11.8739),
  (2, 02, '2005', 11.4406),
  (2, 03, '2005', 11.1321),
  (2, 04, '2005', 10.7478),
  (2, 05, '2005',  9.0752),
  (2, 06, '2005',  7.1171),
  (2, 07, '2005',  5.3725),
  (2, 08, '2005',  3.4258),
  (2, 09, '2005',  2.1726),
  (2, 10, '2005',  2.3864),
  (2, 11, '2005',  1.9598),
  (2, 12, '2005',  1.2008),
  (2, 01, '2006',  1.7350),
  (2, 02, '2006',  1.4409),
  (2, 03, '2006',  0.3546),
  (2, 04, '2006', -0.9190),
  (2, 05, '2006', -0.3232),
  (2, 06, '2006',  0.8682),
  (2, 07, '2006',  1.3945),
  (2, 08, '2006',  2.4355),
  (2, 09, '2006',  3.2799),
  (2, 10, '2006',  3.1464),
  (2, 11, '2006',  3.5060),
  (2, 12, '2006',  3.8476),
  (2, 01, '2007',  3.4154),
  (2, 02, '2007',  3.6843),
  (2, 03, '2007',  4.2767),
  (2, 04, '2007',  4.7583),
  (2, 05, '2007',  4.4035),
  (2, 06, '2007',  3.8958),
  (2, 07, '2007',  3.9995),
  (2, 08, '2007',  4.6315),
  (2, 09, '2007',  5.6748),
  (2, 10, '2007',  6.2849),
  (2, 11, '2007',  6.2215),
  (2, 12, '2007',  7.7463),
  (2, 01, '2008',  8.3788),
  (2, 02, '2008',  8.6598),
  (2, 03, '2008',  9.0930),
  (2, 04, '2008',  9.8017),
  (2, 05, '2008', 11.5250),
  (2, 06, '2008', 13.4383),
  (2, 07, '2008', 15.1125),
  (2, 08, '2008', 13.6305),
  (2, 09, '2008', 12.3068),
  (2, 10, '2008', 12.2290),
  (2, 11, '2008', 11.8835),
  (2, 12, '2008',  9.8054),
  (2, 01, '2009',  8.1435),
  (2, 02, '2009',  7.8531),
  (2, 03, '2009',  6.2686),
  (2, 04, '2009',  5.3820),
  (2, 05, '2009',  3.6397),
  (2, 06, '2009',  1.5258),
  (2, 07, '2009', -0.6591),
  (2, 08, '2009', -0.6990),
  (2, 09, '2009', -0.3915),
  (2, 10, '2009', -1.3089),
  (2, 11, '2009', -1.5842),
  (2, 12, '2009', -1.7123),
  (2, 01, '2010', -0.6559),
  (2, 02, '2010',  0.2556),
  (2, 03, '2010',  1.9525),
  (2, 04, '2010',  2.8919),
  (2, 05, '2010',  4.1892),
  (2, 06, '2010',  5.1800),
  (2, 07, '2010',  5.7927),
  (2, 08, '2010',  6.9925),
  (2, 09, '2010',  7.7702),
  (2, 10, '2010',  8.8043),
  (2, 11, '2010', 10.2717),
  (2, 12, '2010', 11.3220),
  (2, 01, '2011', 11.4990),
  (2, 02, '2011', 11.3007),
  (2, 03, '2011', 10.9478),
  (2, 04, '2011', 10.5955),
  (2, 05, '2011',  9.7649),
  (2, 06, '2011',  8.6438),
  (2, 07, '2011',  8.3509),
  (2, 08, '2011',  7.9961),
  (2, 09, '2011',  7.4622),
  (2, 10, '2011',  6.9516),
  (2, 11, '2011',  5.9501),
  (2, 12, '2011',  5.0977),
  (2, 01, '2012',  4.5347),
  (2, 02, '2012',  3.4376),
  (2, 03, '2012',  3.2422),
  (2, 04, '2012',  3.6534),
  (2, 05, '2012',  4.2623),
  (2, 06, '2012',  5.1397),
  (2, 07, '2012',  6.6766),
  (2, 08, '2012',  7.7280),
  (2, 09, '2012',  8.0705),
  (2, 10, '2012',  7.5222),
  (2, 11, '2012',  6.9553),
  (2, 12, '2012',  7.8119),
  (2, 01, '2013',  7.9087),
  (2, 02, '2013',  8.2866),
  (2, 03, '2013',  8.0494),
  (2, 04, '2013',  7.2994),
  (2, 05, '2013',  6.2160),
  (2, 06, '2013',  6.3110),
  (2, 07, '2013',  5.1780),
  (2, 08, '2013',  3.8507),
  (2, 09, '2013',  4.3959),
  (2, 10, '2013',  5.2726),
  (2, 11, '2013',  5.6096),
  (2, 12, '2013',  5.5257),
  (2, 01, '2014',  5.6729),
  (2, 02, '2014',  5.7677),
  (2, 03, '2014',  7.3087),
  (2, 04, '2014',  7.9837),
  (2, 05, '2014',  7.8434),
  (2, 06, '2014',  6.2484),
  (2, 07, '2014',  5.3265),
  (2, 08, '2014',  4.8848),
  (2, 09, '2014',  3.5414),
  (2, 10, '2014',  2.9460),
  (2, 11, '2014',  3.6543),
  (2, 12, '2014',  3.6749),
  (2, 01, '2015',  3.9638),
  (2, 02, '2015',  3.8499),
  (2, 03, '2015',  3.1450),
  (2, 04, '2015',  3.5442),
  (2, 05, '2015',  4.1041),
  (2, 06, '2015',  5.5829),
  (2, 07, '2015',  6.9639),
  (2, 08, '2015',  7.5538),
  (2, 09, '2015',  8.3588),
  (2, 10, '2015', 10.0985),
  (2, 11, '2015', 10.6873),
  (2, 12, '2015', 10.5443),
  (2, 01, '2016', 10.9612),
  (2, 02, '2016', 12.0900),
  (2, 03, '2016', 11.5682),
  (2, 04, '2016', 10.6419),
  (2, 05, '2016', 11.0937),
  (2, 06, '2016', 12.2193),
  (2, 07, '2016', 11.6509),
  (2, 08, '2016', 11.5062),
  (2, 09, '2016', 10.6777),
  (2, 10, '2016',  8.7985),
  (2, 11, '2016',  7.1374),
  (2, 12, '2016',  7.1907),
  (2, 01, '2017',  6.6608),
  (2, 02, '2017',  5.3866),
  (2, 03, '2017',  4.8624),
  (2, 04, '2017',  3.3678),
  (2, 05, '2017',  1.5736),
  (2, 06, '2017', -0.7837),
  (2, 07, '2017', -1.6751),
  (2, 08, '2017', -1.7242),
  (2, 09, '2017', -1.4594),
  (2, 10, '2017', -1.4200),
  (2, 11, '2017', -0.8777),
  (2, 12, '2017', -0.5326),
  (2, 01, '2018', -0.4140),
  (2, 02, '2018', -0.4239),
  (2, 03, '2018',  0.2033),
  (2, 04, '2018',  1.8953),
  (2, 05, '2018',  4.2712),
  (2, 06, '2018',  6.9376),
  (2, 07, '2018',  8.2624),
  (2, 08, '2018',  8.9114),
  (2, 09, '2018', 10.0496),
  (2, 10, '2018', 10.8074),
  (2, 11, '2018',  9.6940),
  (2, 12, '2018',  7.5521),
  (2, 01, '2019',  6.7516),
  (2, 02, '2019',  7.6157),
  (2, 03, '2019',  8.2786),
  (2, 04, '2019',  8.6555),
  (2, 05, '2019',  7.6587),
  (2, 06, '2019',  6.5279),
  (2, 07, '2019',  6.4113),
  (2, 08, '2019',  4.9636),
  (2, 09, '2019',  3.3817),
  (2, 10, '2019',  3.1665),
  (2, 11, '2019',  3.9856),
  (2, 12, '2019',  7.3179),
  (2, 01, '2020',  7.8223),
  (2, 02, '2020',  6.8389),
  (2, 03, '2020',  6.8178),
  (2, 04, '2020',  6.6908),
  (2, 05, '2020',  6.5103),
  (2, 06, '2020',  7.3133),
  (2, 07, '2020',  9.2693),
  (2, 08, '2020', 13.0205),
  (2, 09, '2020', 17.9374),
  (2, 10, '2020', 20.9245),
  (2, 11, '2020', 24.5173),
  (2, 12, '2020', 23.1391),
  (2, 01, '2021', 25.7126),
  (2, 02, '2021', 28.9447),
  (2, 03, '2021', 31.1099),
  (2, 04, '2021', 32.0334),
  (2, 05, '2021', 37.0630),
  (2, 06, '2021', 35.7674);

-- INPC
INSERT INTO erp.accumulatedValues (indicatorID, month, year, value) VALUES
  (3, 01, '2003', 16.3294),
  (3, 02, '2003', 17.6630),
  (3, 03, '2003', 18.5401),
  (3, 04, '2003', 19.3642),
  (3, 05, '2003', 20.4375),
  (3, 06, '2003', 19.6355),
  (3, 07, '2003', 18.3227),
  (3, 08, '2003', 17.5249),
  (3, 09, '2003', 17.5133),
  (3, 10, '2003', 16.1480),
  (3, 11, '2003', 12.7554),
  (3, 12, '2003', 10.3839),
  (3, 01, '2004',  8.6172),
  (3, 02, '2004',  7.4718),
  (3, 03, '2004',  6.6236),
  (3, 04, '2004',  5.6034),
  (3, 05, '2004',  4.9865),
  (3, 06, '2004',  5.5748),
  (3, 07, '2004',  6.3029),
  (3, 08, '2004',  6.6425),
  (3, 09, '2004',  5.9549),
  (3, 10, '2004',  5.7228),
  (3, 11, '2004',  5.7965),
  (3, 12, '2004',  6.1332),
  (3, 01, '2005',  5.8595),
  (3, 02, '2005',  5.9123),
  (3, 03, '2005',  6.0808),
  (3, 04, '2005',  6.6090),
  (3, 05, '2005',  6.9276),
  (3, 06, '2005',  6.2785),
  (3, 07, '2005',  5.5400),
  (3, 08, '2005',  5.0149),
  (3, 09, '2005',  4.9939),
  (3, 10, '2005',  5.4237),
  (3, 11, '2005',  5.5286),
  (3, 12, '2005',  5.0474),
  (3, 01, '2006',  4.8489),
  (3, 02, '2006',  4.6297),
  (3, 03, '2006',  4.1519),
  (3, 04, '2006',  3.3365),
  (3, 05, '2006',  2.7516),
  (3, 06, '2006',  2.7927),
  (3, 07, '2006',  2.8749),
  (3, 08, '2006',  2.8543),
  (3, 09, '2006',  2.8646),
  (3, 10, '2006',  2.7112),
  (3, 11, '2006',  2.5886),
  (3, 12, '2006',  2.8134),
  (3, 01, '2007',  2.9261),
  (3, 02, '2007',  3.1212),
  (3, 03, '2007',  3.2959),
  (3, 04, '2007',  3.4404),
  (3, 05, '2007',  3.5747),
  (3, 06, '2007',  3.9685),
  (3, 07, '2007',  4.1867),
  (3, 08, '2007',  4.8224),
  (3, 09, '2007',  4.9164),
  (3, 10, '2007',  4.7808),
  (3, 11, '2007',  4.7911),
  (3, 12, '2007',  5.1556),
  (3, 01, '2008',  5.3649),
  (3, 02, '2008',  5.4279),
  (3, 03, '2008',  5.5013),
  (3, 04, '2008',  5.9012),
  (3, 05, '2008',  6.6406),
  (3, 06, '2008',  7.2785),
  (3, 07, '2008',  7.5566),
  (3, 08, '2008',  7.1503),
  (3, 09, '2008',  7.0434),
  (3, 10, '2008',  7.2568),
  (3, 11, '2008',  7.2034),
  (3, 12, '2008',  6.4814),
  (3, 01, '2009',  6.4286),
  (3, 02, '2009',  6.2485),
  (3, 03, '2009',  5.9208),
  (3, 04, '2009',  5.8261),
  (3, 05, '2009',  5.4487),
  (3, 06, '2009',  4.9367),
  (3, 07, '2009',  4.5715),
  (3, 08, '2009',  4.4359),
  (3, 09, '2009',  4.4462),
  (3, 10, '2009',  4.1761),
  (3, 11, '2009',  4.1657),
  (3, 12, '2009',  4.1137),
  (3, 01, '2010',  4.3620),
  (3, 02, '2010',  4.7677),
  (3, 03, '2010',  5.3011),
  (3, 04, '2010',  5.4896),
  (3, 05, '2010',  5.3113),
  (3, 06, '2010',  4.7555),
  (3, 07, '2010',  4.4420),
  (3, 08, '2010',  4.2854),
  (3, 09, '2010',  4.6810),
  (3, 10, '2010',  5.3912),
  (3, 11, '2010',  6.0842),
  (3, 12, '2010',  6.4652),
  (3, 01, '2011',  6.5285),
  (3, 02, '2011',  6.3593),
  (3, 03, '2011',  6.3065),
  (3, 04, '2011',  6.2959),
  (3, 05, '2011',  6.4441),
  (3, 06, '2011',  6.7957),
  (3, 07, '2011',  6.8705),
  (3, 08, '2011',  7.3946),
  (3, 09, '2011',  7.2984),
  (3, 10, '2011',  6.6605),
  (3, 11, '2011',  6.1749),
  (3, 12, '2011',  6.0799),
  (3, 01, '2012',  5.6279),
  (3, 02, '2012',  5.4704),
  (3, 03, '2012',  4.9674),
  (3, 04, '2012',  4.8841),
  (3, 05, '2012',  4.8632),
  (3, 06, '2012',  4.9051),
  (3, 07, '2012',  5.3562),
  (3, 08, '2012',  5.3877),
  (3, 09, '2012',  5.5765),
  (3, 10, '2012',  5.9868),
  (3, 11, '2012',  5.9553),
  (3, 12, '2012',  6.1978),
  (3, 01, '2013',  6.6310),
  (3, 02, '2013',  6.7691),
  (3, 03, '2013',  7.2167),
  (3, 04, '2013',  7.1634),
  (3, 05, '2013',  6.9503),
  (3, 06, '2013',  6.9716),
  (3, 07, '2013',  6.3751),
  (3, 08, '2013',  6.0680),
  (3, 09, '2013',  5.6886),
  (3, 10, '2013',  5.5836),
  (3, 11, '2013',  5.5836),
  (3, 12, '2013',  5.5627),
  (3, 01, '2014',  5.2593),
  (3, 02, '2014',  5.3850),
  (3, 03, '2014',  5.6154),
  (3, 04, '2014',  5.8149),
  (3, 05, '2014',  6.0786),
  (3, 06, '2014',  6.0574),
  (3, 07, '2014',  6.3335),
  (3, 08, '2014',  6.3547),
  (3, 09, '2014',  6.5881),
  (3, 10, '2014',  6.3444),
  (3, 11, '2014',  6.3338),
  (3, 12, '2014',  6.2283),
  (3, 01, '2015',  7.1256),
  (3, 02, '2015',  7.6791),
  (3, 03, '2015',  8.4160),
  (3, 04, '2015',  8.3407),
  (3, 05, '2015',  8.7607),
  (3, 06, '2015',  9.3140),
  (3, 07, '2015',  9.8052),
  (3, 08, '2015',  9.8820),
  (3, 09, '2015',  9.9038),
  (3, 10, '2015', 10.3308),
  (3, 11, '2015', 10.9674),
  (3, 12, '2015', 11.2762),
  (3, 01, '2016', 11.3091),
  (3, 02, '2016', 11.0780),
  (3, 03, '2016',  9.9071),
  (3, 04, '2016',  9.8307),
  (3, 05, '2016',  9.8199),
  (3, 06, '2016',  9.4929),
  (3, 07, '2016',  9.5582),
  (3, 08, '2016',  9.6238),
  (3, 09, '2016',  9.1548),
  (3, 10, '2016',  8.5049),
  (3, 11, '2016',  7.3888),
  (3, 12, '2016',  6.5800),
  (3, 01, '2017',  5.4355),
  (3, 02, '2017',  4.6940),
  (3, 03, '2017',  4.5689),
  (3, 04, '2017',  3.9870),
  (3, 05, '2017',  3.3486),
  (3, 06, '2017',  2.5565),
  (3, 07, '2017',  2.0776),
  (3, 08, '2017',  1.7316),
  (3, 09, '2017',  1.6299),
  (3, 10, '2017',  1.8328),
  (3, 11, '2017',  1.9448),
  (3, 12, '2017',  2.0669),
  (3, 01, '2018',  1.8738),
  (3, 02, '2018',  1.8128),
  (3, 03, '2018',  1.5591),
  (3, 04, '2018',  1.6910),
  (3, 05, '2018',  1.7620),
  (3, 06, '2018',  3.5277),
  (3, 07, '2018',  3.6104),
  (3, 08, '2018',  3.6415),
  (3, 09, '2018',  3.9732),
  (3, 10, '2018',  4.0043),
  (3, 11, '2018',  3.5579),
  (3, 12, '2018',  3.4340),
  (3, 01, '2019',  3.5681),
  (3, 02, '2019',  3.9403),
  (3, 03, '2019',  4.6674),
  (3, 04, '2019',  5.0747),
  (3, 05, '2019',  4.7818),
  (3, 06, '2019',  3.3148),
  (3, 07, '2019',  3.1602),
  (3, 08, '2019',  3.2840),
  (3, 09, '2019',  2.9236),
  (3, 10, '2019',  2.5546),
  (3, 11, '2019',  3.3668),
  (3, 12, '2019',  4.4816),
  (3, 01, '2020',  4.3046),
  (3, 02, '2020',  3.9208),
  (3, 03, '2020',  3.3123),
  (3, 04, '2020',  2.4599),
  (3, 05, '2020',  2.0507),
  (3, 06, '2020',  2.3466),
  (3, 07, '2020',  2.6943),
  (3, 08, '2020',  2.9404),
  (3, 09, '2020',  3.8879),
  (3, 10, '2020',  4.7706),
  (3, 11, '2020',  5.1979),
  (3, 12, '2020',  5.4473),
  (3, 01, '2021',  5.5315),
  (3, 02, '2021',  6.2163),
  (3, 03, '2021',  6.9373),
  (3, 04, '2021',  7.5911),
  (3, 05, '2021',  8.8962),
  (3, 06, '2021',  9.2219);

-- IPC
INSERT INTO erp.accumulatedValues (indicatorID, month, year, value) VALUES
  (4, 01, '2004',  6.5366),
  (4, 02, '2004',  5.0478),
  (4, 03, '2004',  4.4739),
  (4, 04, '2004',  4.1830),
  (4, 05, '2004',  4.4530),
  (4, 06, '2004',  5.5829),
  (4, 07, '2004',  6.2909),
  (4, 08, '2004',  6.6712),
  (4, 09, '2004',  6.0047),
  (4, 10, '2004',  5.9942),
  (4, 11, '2004',  6.3008),
  (4, 12, '2004',  6.5654),
  (4, 01, '2005',  6.4701),
  (4, 02, '2005',  6.6508),
  (4, 03, '2005',  7.3645),
  (4, 04, '2005',  7.9426),
  (4, 05, '2005',  7.7064),
  (4, 06, '2005',  6.5111),
  (4, 07, '2005',  6.2040),
  (4, 08, '2005',  4.9526),
  (4, 09, '2005',  5.1935),
  (4, 10, '2005',  5.2039),
  (4, 11, '2005',  4.9215),
  (4, 12, '2005',  4.5254),
  (4, 01, '2006',  4.4631),
  (4, 02, '2006',  4.0571),
  (4, 03, '2006',  3.3860),
  (4, 04, '2006',  2.5453),
  (4, 05, '2006',  1.9628),
  (4, 06, '2006',  1.8504),
  (4, 07, '2006',  1.7590),
  (4, 08, '2006',  2.0853),
  (4, 09, '2006',  1.8922),
  (4, 10, '2006',  1.6492),
  (4, 11, '2006',  1.7809),
  (4, 12, '2006',  2.5421),
  (4, 01, '2007',  2.7053),
  (4, 02, '2007',  3.0752),
  (4, 03, '2007',  3.0443),
  (4, 04, '2007',  3.3739),
  (4, 05, '2007',  3.9749),
  (4, 06, '2007',  4.8719),
  (4, 07, '2007',  4.9347),
  (4, 08, '2007',  4.8823),
  (4, 09, '2007',  4.8718),
  (4, 10, '2007',  4.5480),
  (4, 11, '2007',  4.5999),
  (4, 12, '2007',  4.3723),
  (4, 01, '2008',  4.2271),
  (4, 02, '2008',  4.0817),
  (4, 03, '2008',  4.2896),
  (4, 04, '2008',  4.5079),
  (4, 05, '2008',  5.4138),
  (4, 06, '2008',  5.8437),
  (4, 07, '2008',  6.0337),
  (4, 08, '2008',  6.3622),
  (4, 09, '2008',  6.5107),
  (4, 10, '2008',  6.9577),
  (4, 11, '2008',  6.8725),
  (4, 12, '2008',  6.1729),
  (4, 01, '2009',  6.1095),
  (4, 02, '2009',  6.1943),
  (4, 03, '2009',  6.2895),
  (4, 04, '2009',  6.0464),
  (4, 05, '2009',  5.1036),
  (4, 06, '2009',  4.2394),
  (4, 07, '2009',  4.1150),
  (4, 08, '2009',  4.2186),
  (4, 09, '2009',  3.9903),
  (4, 10, '2009',  3.7316),
  (4, 11, '2009',  3.6283),
  (4, 12, '2009',  3.6490),
  (4, 01, '2010',  4.5569),
  (4, 02, '2010',  5.0470),
  (4, 03, '2010',  4.9842),
  (4, 04, '2010',  5.0679),
  (4, 05, '2010',  4.9527),
  (4, 06, '2010',  4.8584),
  (4, 07, '2010',  4.6912),
  (4, 08, '2010',  4.3682),
  (4, 09, '2010',  4.7537),
  (4, 10, '2010',  5.5792),
  (4, 11, '2010',  6.0319),
  (4, 12, '2010',  6.4129),
  (4, 01, '2011',  6.2134),
  (4, 02, '2011',  6.0658),
  (4, 03, '2011',  6.0764),
  (4, 04, '2011',  6.4040),
  (4, 05, '2011',  6.4995),
  (4, 06, '2011',  6.4676),
  (4, 07, '2011',  6.6057),
  (4, 08, '2011',  6.8399),
  (4, 09, '2011',  6.5423),
  (4, 10, '2011',  5.8569),
  (4, 11, '2011',  5.7308),
  (4, 12, '2011',  5.8044),
  (4, 01, '2012',  5.2919),
  (4, 02, '2012',  4.5906),
  (4, 03, '2012',  4.3822),
  (4, 04, '2012',  4.1437),
  (4, 05, '2012',  4.1853),
  (4, 06, '2012',  4.4145),
  (4, 07, '2012',  4.2375),
  (4, 08, '2012',  4.1129),
  (4, 09, '2012',  4.4244),
  (4, 10, '2012',  4.8509),
  (4, 11, '2012',  4.9343),
  (4, 12, '2012',  5.1116),
  (4, 01, '2013',  5.6233),
  (4, 02, '2013',  5.9298),
  (4, 03, '2013',  5.5913),
  (4, 04, '2013',  5.3916),
  (4, 05, '2013',  5.1291),
  (4, 06, '2013',  5.2235),
  (4, 07, '2013',  4.9503),
  (4, 08, '2013',  4.8979),
  (4, 09, '2013',  4.5850),
  (4, 10, '2013',  4.2529),
  (4, 11, '2013',  4.0251),
  (4, 12, '2013',  3.8909),
  (4, 01, '2014',  3.6753),
  (4, 02, '2014',  3.9856),
  (4, 03, '2014',  4.9335),
  (4, 04, '2014',  5.1951),
  (4, 05, '2014',  5.3527),
  (4, 06, '2014',  5.0587),
  (4, 07, '2014',  5.3637),
  (4, 08, '2014',  5.4899),
  (4, 09, '2014',  5.4478),
  (4, 10, '2014',  5.3324),
  (4, 11, '2014',  5.5735),
  (4, 12, '2014',  5.2064),
  (4, 01, '2015',  5.9151),
  (4, 02, '2015',  6.6527),
  (4, 03, '2015',  6.6104),
  (4, 04, '2015',  7.2148),
  (4, 05, '2015',  7.6105),
  (4, 06, '2015',  8.0731),
  (4, 07, '2015',  8.8176),
  (4, 08, '2015',  9.0562),
  (4, 09, '2015',  9.5459),
  (4, 10, '2015', 10.1025),
  (4, 11, '2015', 10.5071),
  (4, 12, '2015', 11.0800),
  (4, 01, '2016', 10.8068),
  (4, 02, '2016', 10.4455),
  (4, 03, '2016', 10.7416),
  (4, 04, '2016', 10.0406),
  (4, 05, '2016',  9.9859),
  (4, 06, '2016', 10.1830),
  (4, 07, '2016',  9.6367),
  (4, 08, '2016',  9.1461),
  (4, 09, '2016',  8.2786),
  (4, 10, '2016',  7.6239),
  (4, 11, '2016',  6.6548),
  (4, 12, '2016',  6.5490),
  (4, 01, '2017',  5.4454),
  (4, 02, '2017',  4.4316),
  (4, 03, '2017',  3.5731),
  (4, 04, '2017',  3.7278),
  (4, 05, '2017',  3.0883),
  (4, 06, '2017',  2.4738),
  (4, 07, '2017',  2.1061),
  (4, 08, '2017',  2.0959),
  (4, 09, '2017',  2.2595),
  (4, 10, '2017',  2.3105),
  (4, 11, '2017',  2.4535),
  (4, 12, '2017',  2.2806),
  (4, 01, '2018',  2.4233),
  (4, 02, '2018',  2.0748),
  (4, 03, '2018',  1.9321),
  (4, 04, '2018',  1.2837),
  (4, 05, '2018',  1.5269),
  (4, 06, '2018',  2.5011),
  (4, 07, '2018',  2.7471),
  (4, 08, '2018',  3.0653),
  (4, 09, '2018',  3.4466),
  (4, 10, '2018',  3.6116),
  (4, 11, '2018',  3.4669),
  (4, 12, '2018',  2.9936),
  (4, 01, '2019',  3.1166),
  (4, 02, '2019',  4.1107),
  (4, 03, '2019',  4.6417),
  (4, 04, '2019',  4.9766),
  (4, 05, '2019',  4.7566),
  (4, 06, '2019',  3.8647),
  (4, 07, '2019',  3.7714),
  (4, 08, '2019',  3.6887),
  (4, 09, '2019',  3.2859),
  (4, 10, '2019',  2.9570),
  (4, 11, '2019',  3.5019),
  (4, 12, '2019',  4.3808),
  (4, 01, '2020',  4.0799),
  (4, 02, '2020',  3.6347),
  (4, 03, '2020',  3.2120),
  (4, 04, '2020',  2.6048),
  (4, 05, '2020',  2.3790),
  (4, 06, '2020',  2.6244),
  (4, 07, '2020',  2.7371),
  (4, 08, '2020',  3.1979),
  (4, 09, '2020',  4.3537),
  (4, 10, '2020',  5.4268),
  (4, 11, '2020',  5.7933),
  (4, 12, '2020',  5.6361),
  (4, 01, '2021',  6.2365),
  (4, 02, '2021',  6.3638),
  (4, 03, '2021',  7.0120),
  (4, 04, '2021',  7.8063),
  (4, 05, '2021',  8.5087),
  (4, 06, '2021',  8.9627);

-- IPCA
INSERT INTO erp.accumulatedValues (indicatorID, month, year, value) VALUES
  (5, 01, '2004',  7.7072),
  (5, 02, '2004',  6.6892),
  (5, 03, '2004',  5.8882),
  (5, 04, '2004',  5.2590),
  (5, 05, '2004',  5.1544),
  (5, 06, '2004',  6.0601),
  (5, 07, '2004',  6.8116),
  (5, 08, '2004',  7.1842),
  (5, 09, '2004',  6.7056),
  (5, 10, '2004',  6.8652),
  (5, 11, '2004',  7.2379),
  (5, 12, '2004',  7.6006),
  (5, 01, '2005',  7.4084),
  (5, 02, '2005',  7.3871),
  (5, 03, '2005',  7.5367),
  (5, 04, '2005',  8.0724),
  (5, 05, '2005',  8.0509),
  (5, 06, '2005',  7.2677),
  (5, 07, '2005',  6.5661),
  (5, 08, '2005',  6.0158),
  (5, 09, '2005',  6.0369),
  (5, 10, '2005',  6.3642),
  (5, 11, '2005',  6.2163),
  (5, 12, '2005',  5.6897),
  (5, 01, '2006',  5.7002),
  (5, 02, '2006',  5.5111),
  (5, 03, '2006',  5.3223),
  (5, 04, '2006',  4.6332),
  (5, 05, '2006',  4.2271),
  (5, 06, '2006',  4.0290),
  (5, 07, '2006',  3.9668),
  (5, 08, '2006',  3.8422),
  (5, 09, '2006',  3.6974),
  (5, 10, '2006',  3.2651),
  (5, 11, '2006',  3.0186),
  (5, 12, '2006',  3.1418),
  (5, 01, '2007',  2.9880),
  (5, 02, '2007',  3.0187),
  (5, 03, '2007',  2.9571),
  (5, 04, '2007',  2.9982),
  (5, 05, '2007',  3.1834),
  (5, 06, '2007',  3.6901),
  (5, 07, '2007',  3.7419),
  (5, 08, '2007',  4.1774),
  (5, 09, '2007',  4.1460),
  (5, 10, '2007',  4.1151),
  (5, 11, '2007',  4.1876),
  (5, 12, '2007',  4.4572),
  (5, 01, '2008',  4.5612),
  (5, 02, '2008',  4.6133),
  (5, 03, '2008',  4.7279),
  (5, 04, '2008',  5.0413),
  (5, 05, '2008',  5.5755),
  (5, 06, '2008',  6.0598),
  (5, 07, '2008',  6.3668),
  (5, 08, '2008',  6.1656),
  (5, 09, '2008',  6.2504),
  (5, 10, '2008',  6.4093),
  (5, 11, '2008',  6.3881),
  (5, 12, '2008',  5.9023),
  (5, 01, '2009',  5.8391),
  (5, 02, '2009',  5.9023),
  (5, 03, '2009',  5.6072),
  (5, 04, '2009',  5.5337),
  (5, 05, '2009',  5.1986),
  (5, 06, '2009',  4.8018),
  (5, 07, '2009',  4.4995),
  (5, 08, '2009',  4.3640),
  (5, 09, '2009',  4.3431),
  (5, 10, '2009',  4.1666),
  (5, 11, '2009',  4.2185),
  (5, 12, '2009',  4.3120),
  (5, 01, '2010',  4.5923),
  (5, 02, '2010',  4.8315),
  (5, 03, '2010',  5.1664),
  (5, 04, '2010',  5.2606),
  (5, 05, '2010',  5.2187),
  (5, 06, '2010',  4.8412),
  (5, 07, '2010',  4.6007),
  (5, 08, '2010',  4.4858),
  (5, 09, '2010',  4.7046),
  (5, 10, '2010',  5.1954),
  (5, 11, '2010',  5.6354),
  (5, 12, '2010',  5.9090),
  (5, 01, '2011',  5.9932),
  (5, 02, '2011',  6.0142),
  (5, 03, '2011',  6.2990),
  (5, 04, '2011',  6.5104),
  (5, 05, '2011',  6.5528),
  (5, 06, '2011',  6.7126),
  (5, 07, '2011',  6.8727),
  (5, 08, '2011',  7.2252),
  (5, 09, '2011',  7.3106),
  (5, 10, '2011',  6.9698),
  (5, 11, '2011',  6.6409),
  (5, 12, '2011',  6.5031),
  (5, 01, '2012',  6.2178),
  (5, 02, '2012',  5.8491),
  (5, 03, '2012',  5.2399),
  (5, 04, '2012',  5.1042),
  (5, 05, '2012',  4.9892),
  (5, 06, '2012',  4.9157),
  (5, 07, '2012',  5.1986),
  (5, 08, '2012',  5.2405),
  (5, 09, '2012',  5.2824),
  (5, 10, '2012',  5.4500),
  (5, 11, '2012',  5.5340),
  (5, 12, '2012',  5.8386),
  (5, 01, '2013',  6.1543),
  (5, 02, '2013',  6.3128),
  (5, 03, '2013',  6.5887),
  (5, 04, '2013',  6.4933),
  (5, 05, '2013',  6.5040),
  (5, 06, '2013',  6.6955),
  (5, 07, '2013',  6.2706),
  (5, 08, '2013',  6.0906),
  (5, 09, '2013',  5.8586),
  (5, 10, '2013',  5.8375),
  (5, 11, '2013',  5.7744),
  (5, 12, '2013',  5.9108),
  (5, 01, '2014',  5.5853),
  (5, 02, '2014',  5.6798),
  (5, 03, '2014',  6.1531),
  (5, 04, '2014',  6.2798),
  (5, 05, '2014',  6.3751),
  (5, 06, '2014',  6.5236),
  (5, 07, '2014',  6.5023),
  (5, 08, '2014',  6.5129),
  (5, 09, '2014',  6.7465),
  (5, 10, '2014',  6.5872),
  (5, 11, '2014',  6.5554),
  (5, 12, '2014',  6.4076),
  (5, 01, '2015',  7.1378),
  (5, 02, '2015',  7.7018),
  (5, 03, '2015',  8.1286),
  (5, 04, '2015',  8.1716),
  (5, 05, '2015',  8.4731),
  (5, 06, '2015',  8.8944),
  (5, 07, '2015',  9.5586),
  (5, 08, '2015',  9.5259),
  (5, 09, '2015',  9.4932),
  (5, 10, '2015',  9.9293),
  (5, 11, '2015', 10.4762),
  (5, 12, '2015', 10.6735),
  (5, 01, '2016', 10.7063),
  (5, 02, '2016', 10.3563),
  (5, 03, '2016',  9.3869),
  (5, 04, '2016',  9.2783),
  (5, 05, '2016',  9.3217),
  (5, 06, '2016',  8.8445),
  (5, 07, '2016',  8.7363),
  (5, 08, '2016',  8.9750),
  (5, 09, '2016',  8.4764),
  (5, 10, '2016',  7.8739),
  (5, 11, '2016',  6.9875),
  (5, 12, '2016',  6.2881),
  (5, 01, '2017',  5.3540),
  (5, 02, '2017',  4.7588),
  (5, 03, '2017',  4.5710),
  (5, 04, '2017',  4.0825),
  (5, 05, '2017',  3.5971),
  (5, 06, '2017',  2.9984),
  (5, 07, '2017',  2.7115),
  (5, 08, '2017',  2.4558),
  (5, 09, '2017',  2.5377),
  (5, 10, '2017',  2.7013),
  (5, 11, '2017',  2.8039),
  (5, 12, '2017',  2.9473),
  (5, 01, '2018',  2.8550),
  (5, 02, '2018',  2.8448),
  (5, 03, '2018',  2.6807),
  (5, 04, '2018',  2.7627),
  (5, 05, '2018',  2.8549),
  (5, 06, '2018',  4.3910),
  (5, 07, '2018',  4.4847),
  (5, 08, '2018',  4.1927),
  (5, 09, '2018',  4.5256),
  (5, 10, '2018',  4.5568),
  (5, 11, '2018',  4.0459),
  (5, 12, '2018',  3.7455),
  (5, 01, '2019',  3.7765),
  (5, 02, '2019',  3.8903),
  (5, 03, '2019',  4.5754),
  (5, 04, '2019',  4.9406),
  (5, 05, '2019',  4.6584),
  (5, 06, '2019',  3.3664),
  (5, 07, '2019',  3.2222),
  (5, 08, '2019',  3.4288),
  (5, 09, '2019',  2.8935),
  (5, 10, '2019',  2.5350),
  (5, 11, '2019',  3.2748),
  (5, 12, '2019',  4.3060),
  (5, 01, '2020',  4.1917),
  (5, 02, '2020',  4.0049),
  (5, 03, '2020',  3.3030),
  (5, 04, '2020',  2.3990),
  (5, 05, '2020',  1.8775),
  (5, 06, '2020',  2.1322),
  (5, 07, '2020',  2.3055),
  (5, 08, '2020',  2.4383),
  (5, 09, '2020',  3.1352),
  (5, 10, '2020',  3.9182),
  (5, 11, '2020',  4.3111),
  (5, 12, '2020',  4.5173),
  (5, 01, '2021',  4.5591),
  (5, 02, '2021',  5.1953),
  (5, 03, '2021',  6.0993),
  (5, 04, '2021',  6.7592),
  (5, 05, '2021',  8.0559),
  (5, 06, '2021',  8.3469);


-- ---------------------------------------------------------------------
-- Meios de pagamento
-- ---------------------------------------------------------------------
-- São os métodos utilizados para o fechamento da venda, é o recurso
-- usado para a efetivação da troca financeira. Pode ser o cartão de
-- crédito ou débito, cheque (apesar de estar entrando em desuso),
-- dinheiro, transferência bancária e boleto bancário.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.paymentMethods (
  paymentMethodID    serial,         -- ID do meio de pagamento
  name               varchar(50),    -- O nome do meio de pagamento
  enableForwardSale  boolean         -- A flag indicativa de que o meio
                     DEFAULT FALSE,  -- permite venda à prazo
  requiresSettings   boolean         -- A flag indicativa de que o meio
                     DEFAULT FALSE,  -- de pagamento requer configurações
                                     -- adicionais
  PRIMARY KEY (paymentMethodID)
);

INSERT INTO erp.paymentMethods (paymentMethodID, name,
  enableForwardSale, requiresSettings) VALUES
  (1, 'Dinheiro', false, false),
  (2, 'Cheque', true, false),
  (3, 'Cartão de débito', false, true),
  (4, 'Cartão de crédito', true, true),
  (5, 'Boleto bancário', true, true),
  (6, 'Transferência bancária', false, true);

ALTER SEQUENCE erp.paymentmethods_paymentmethodid_seq RESTART WITH 7;

-- ---------------------------------------------------------------------
-- Definições dos meios de pagamentos
-- ---------------------------------------------------------------------
-- Permite definir as configurações adicionais para um meio de pagamento
-- e que é necessário para seu processamento. Por exemplo, um boleto
-- deve ter configurado aspectos específicos. Porém, podemos ter mais de
-- uma configuração de boletos válidos no sistema, inclusive por bancos
-- distintos.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.definedMethods (
  definedMethodID serial,         -- ID da definição
  contractorID    integer         -- ID da entidade contratante
                  NOT NULL,
  name            varchar(50)     -- O nome da definição do meio
                  NOT NULL,       -- de pagamento
  paymentMethodID integer         -- ID do meio de pagamento
                  NOT NULL,
  parameters      text            -- Os parâmetros configurados
                  NOT NULL,       -- em formato JSON
  billingCounter  integer         -- O contador de cobranças realizadas
                  NOT NULL        -- e que é usado para numerar, por
                  DEFAULT 0,      -- exemplo, boletos no banco
  blocked         boolean         -- O indicativo de definição
                  DEFAULT FALSE,  -- bloqueada para uso
  PRIMARY KEY (definedMethodID),
  FOREIGN KEY (contractorID)
    REFERENCES erp.entities(entityID)
    ON DELETE RESTRICT,
  FOREIGN KEY (paymentMethodID)
    REFERENCES erp.paymentMethods(paymentMethodID)
    ON DELETE CASCADE
);

INSERT INTO erp.definedMethods (definedMethodID, contractorID, name,
  paymentMethodID, parameters, blocked) VALUES
  (1, 1, 'Bradesco', 5,
   '{ "bankCode": 237, "agencyNumber": "1574-1", "accountNumber": "52338-0", "wallet": 9, "kindOfDocument": "RC", "CIP": "000", "layout": "paymentbooklet", "instructionsText": [ "Após o vencimento cobrar 2% de multa e 0,3333% de juros de mora ao dia.", "Protestar após 10 dias." ] }', FALSE);

ALTER SEQUENCE erp.definedmethods_definedmethodid_seq RESTART WITH 2;

-- ---------------------------------------------------------------------
-- Definições das tarifas por meio de pagamento
-- ---------------------------------------------------------------------
-- Permite definir os valores cobrados pela emissão de título através do
-- meio de pagamento.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.definedMethodTariffs (
  definedMethodTariffID serial,         -- ID da tarifa para o método definido
  definedMethodID       integer         -- ID do método para o qual esta
                        NOT NULL,       -- tarifa será cobrada
  basicFare             numeric(12,2)   -- Tarifa básica (cobrada pela
                        NOT NULL        -- emissão)
                        DEFAULT 0.00,
  validFrom             date            -- A data à partir da qual este
                        NOT NULL        -- valor passou a ser cobrado
                        DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (definedMethodTariffID),
  FOREIGN KEY (definedMethodID)
    REFERENCES erp.definedMethods(definedMethodID)
    ON DELETE CASCADE
);

-- ---------------------------------------------------------------------
-- Formas de pagamento
-- ---------------------------------------------------------------------
-- São os tempos para que o valor da venda seja creditado.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.paymentForms (
  paymentFormID  serial,        -- ID da forma de pagamento
  name            varchar(50),  -- O nome da forma de pagamento
  PRIMARY KEY (paymentFormID)
);

INSERT INTO erp.paymentForms (paymentFormID, name) VALUES
  (1, 'À vista'),
  (2, 'A prazo');

ALTER SEQUENCE erp.paymentforms_paymentformid_seq RESTART WITH 3;


-- ---------------------------------------------------------------------
-- As unidades de tempo para os intervalos de pagamentos.
-- ---------------------------------------------------------------------
-- As unidades de tempo possíveis para descrever um intervalo de
-- pagamento:
--   - DAY: o intervalo é expresso em dias,
--   - MONTH: o intervalo é expresso em mêses
-- ---------------------------------------------------------------------
CREATE TYPE PaymentIntervalTimeUnit AS ENUM('DAY', 'MONTH');

-- ---------------------------------------------------------------------
-- Condições de pagamento
-- ---------------------------------------------------------------------
-- Permite estruturar as condições de pagamentos permitidas.
-- 
-- As condições de pagamento são as definições estabelecidas na
-- negociação para a realização da entrega do dinheiro, por exemplo, se
-- é à vista ou parcelado, quantas parcelas, se haverá entrada, se há
-- juros, entre outras questões. 
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.paymentConditions (
  paymentConditionID  serial,         -- ID da condição de pagamento
  contractorID        integer         -- ID da entidade contratante
                      NOT NULL,
  name                varchar(50),    -- O nome da condição
  paymentMethodID     integer         -- ID do meio de pagamento
                      NOT NULL,
  definedMethodID     integer         -- ID da configuração da forma de
                      DEFAULT NULL,   -- pagamento
  paymentFormID       integer         -- ID da forma de pagamento
                      NOT NULL,
  paymentInterval     varchar(50)     -- O intervalo entre pagamentos
                      NOT NULL
                      DEFAULT '0',
  timeUnit  PaymentIntervalTimeUnit   -- A unidade de tempo dos valores
                      NOT NULL        -- descritos no intervalo entre
                      DEFAULT 'DAY',  -- pagamentos
  usePaymentGateway   boolean         -- Flag indicativo de usar
                      DEFAULT FALSE,  -- gateway de pagamento
  blocked             boolean         -- O indicativo de condição de
                      DEFAULT FALSE,  -- pagamento bloqueada
  PRIMARY KEY (paymentConditionID),
  FOREIGN KEY (contractorID)
    REFERENCES erp.entities(entityID)
    ON DELETE RESTRICT,
  FOREIGN KEY (paymentMethodID)
    REFERENCES erp.paymentMethods(paymentMethodID)
    ON DELETE RESTRICT,
  FOREIGN KEY (definedMethodID)
    REFERENCES erp.definedMethods(definedMethodID)
    ON DELETE RESTRICT,
  FOREIGN KEY (paymentFormID)
    REFERENCES erp.paymentForms(paymentFormID)
    ON DELETE RESTRICT
);

INSERT INTO erp.paymentConditions (paymentConditionID, contractorID,
  name, paymentMethodID, definedMethodID, paymentFormID, paymentInterval,
  timeUnit, usePaymentGateway) VALUES
  (1, 1, 'Dinheiro', 1, NULL, 1, '0', 'DAY', FALSE),
  (2, 1, 'Boleto à vista', 5, 1, 1, '2', 'DAY', FALSE),
  (3, 1, 'Boleto mensal', 5, 1, 2, '1', 'MONTH', FALSE),
  (4, 1, 'Carnê 12 vezes', 5, 1, 2, '1/2/3/4/5/6/7/8/9/10/11/12', 'MONTH', FALSE);

ALTER SEQUENCE erp.paymentconditions_paymentconditionid_seq RESTART WITH 5;

-- ---------------------------------------------------------------------
-- Meios de pagamento
-- ---------------------------------------------------------------------
-- São os métodos utilizados para o fechamento da venda, é o recurso
-- usado para a efetivação da troca financeira. Pode ser o cartão de
-- crédito ou débito, cheque (apesar de estar entrando em desuso),
-- dinheiro, transferência bancária e boleto bancário.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.paymentMethods (
  paymentMethodID    serial,         -- ID do meio de pagamento
  name               varchar(50),    -- O nome do meio de pagamento
  enableForwardSale  boolean         -- A flag indicativa de que o meio
                     DEFAULT FALSE,  -- permite venda à prazo
  PRIMARY KEY (paymentMethodID)
);

INSERT INTO erp.paymentMethods (paymentMethodID, name, enableForwardSale) VALUES
  (1, 'Dinheiro', false),
  (2, 'Cheque', true),
  (3, 'Cartão de débito', false),
  (4, 'Cartão de crédito', true),
  (5, 'Boleto bancário', true),
  (6, 'Transferência bancária', false);

ALTER SEQUENCE erp.paymentmethods_paymentmethodid_seq RESTART WITH 7;

-- ---------------------------------------------------------------------
-- Formas de pagamento
-- ---------------------------------------------------------------------
-- São os tempos para que o valor da venda seja creditado.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.paymentForms (
  paymentFormID  serial,        -- ID da forma de pagamento
  name            varchar(50),  -- O nome da forma de pagamento
  PRIMARY KEY (paymentFormID)
);

INSERT INTO erp.paymentForms (paymentFormID, name) VALUES
  (1, 'À vista'),
  (2, 'A prazo');

ALTER SEQUENCE erp.paymentforms_paymentformid_seq RESTART WITH 3;

-- ---------------------------------------------------------------------
-- Estado Civil
-- ---------------------------------------------------------------------
-- Os estados civís válidos.
-- ---------------------------------------------------------------------
DROP TABLE erp.maritalStatus;
CREATE TABLE IF NOT EXISTS erp.maritalStatus (
  maritalStatusID  serial,      -- ID do tipo de estado civíl
  name             varchar(30)  -- Nome do estado civil
                   NOT NULL,
  PRIMARY KEY (maritalStatusID),
  UNIQUE(name)
);

INSERT INTO erp.maritalStatus (maritalStatusID, name) VALUES
  ( 1, 'Não informado'),
  ( 2, 'Solteiro'),
  ( 3, 'Casado'),
  ( 4, 'União Estável'),
  ( 5, 'Separado Judicialmente'),
  ( 6, 'Viúvo');

ALTER SEQUENCE erp.maritalstatus_maritalstatusid_seq RESTART WITH 7;

-- ---------------------------------------------------------------------
-- Gêneros
-- ---------------------------------------------------------------------
-- Os tipos de gêneros (sexos) válidos para efeito de cadastro.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.genders (
  genderID  serial,      -- ID do gênero
  name      varchar(30)  -- Nome do gênero
            NOT NULL,
  PRIMARY KEY (genderID),
  UNIQUE(name)
);

INSERT INTO erp.genders (genderID, name) VALUES
  ( 1, 'Não informado'),
  ( 2, 'Masculino'),
  ( 3, 'Feminino');

ALTER SEQUENCE erp.genders_genderid_seq RESTART WITH 4;

-- ---------------------------------------------------------------------
-- Subtipos de Veículos
-- ---------------------------------------------------------------------
-- Descreve os subtipos de um determinado tipo de veículo principal. Um
-- subtipo é usado para definir melhor o ícone a ser exibido no mapa.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.vehicleSubTypes (
  vehicleSubTypeID   serial,       -- ID do subtipo de veículo
  vehicleTypeID      integer       -- O ID do tipo de veículo
                     NOT NULL,
  name               varchar(30)   -- Nome do subtipo de veículo
                     NOT NULL,
  symbol             varchar(30),   -- Nome do símbolo a ser usado no mapa
  PRIMARY KEY (vehicleSubTypeID),
  UNIQUE(vehicleTypeID, name)
);

INSERT INTO erp.vehicleSubTypes (vehicleTypeID, name) VALUES
  ( 1, 'Carro'),
  ( 1, 'Vam'),
  ( 1, 'Pickup'),
  ( 2, 'Moto'),
  ( 3, 'Caminhão'),
  ( 3, 'Carreta'),
  ( 3, 'Cavalo mecânico'),
  ( 3, 'Ônibus');


-- ---------------------------------------------------------------------
-- Países
-- ---------------------------------------------------------------------
-- Os nomes dos países e suas nacionalidades.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.countries (
  countryID     serial,      -- O ID do país
  name          varchar(50)  -- O nome do país
                NOT NULL,
  nationality   varchar(50)  -- A nacionalidade
                NOT NULL,
  PRIMARY KEY (countryID),
  UNIQUE (name)
);

INSERT INTO erp.countries (countryID, name, nationality) VALUES
  (  1, 'Afeganistão', 'Afegão'),
  (  2, 'África do Sul', 'Sul–africano'),
  (  3, 'Alemanha', 'Alemão'),
  (  4, 'Andorra', 'Andorrano'),
  (  5, 'Angola', 'Angolano'),
  (  6, 'Antígua e Barbuda', 'Antiguano'),
  (  7, 'Argélia', 'Argelino'),
  (  8, 'Argentina', 'Argentino'),
  (  9, 'Armênia', 'Armênio'),
  ( 10, 'Austrália', 'Australiano'),
  ( 11, 'Áustria', 'Austríaco'),
  ( 12, 'Azerbaijão', 'Azeri'),
  ( 13, 'Bahamas', 'Bahamense'),
  ( 14, 'Bangladesh', 'Bangladês'),
  ( 15, 'Barbados', 'Barbadiano'),
  ( 16, 'Barém', 'Baremita'),
  ( 17, 'Bélgica', 'Belga'),
  ( 18, 'Belize', 'Belizenho'),
  ( 19, 'Benim', 'Beninense'),
  ( 20, 'Bielorrússia', 'Bielorrusso'),
  ( 21, 'Bolívia', 'Boliviano'),
  ( 22, 'Bósnia; Bósnia e Herzegovina', 'Bósnio'),
  ( 23, 'Botsuana', 'Bechuano'),
  ( 24, 'Brasil', 'Brasileiro'),
  ( 25, 'Brunei', 'Bruneano'),
  ( 26, 'Bulgária', 'Búlgaro'),
  ( 27, 'BurkinaFaso', 'Burquinense'),
  ( 28, 'Burundi', 'Burundês'),
  ( 29, 'Butão', 'Butanense'),
  ( 30, 'Cabo Verde', 'Cabo-verdiano'),
  ( 31, 'Camarões', 'Camaronense'),
  ( 32, 'Camboja', 'Cambojano'),
  ( 33, 'Canadá', 'Canadense'),
  ( 34, 'Catar', 'Catarense'),
  ( 35, 'Cazaquistão', 'Cazaque'),
  ( 36, 'Chade', 'Chadiano'),
  ( 37, 'Chile', 'Chileno'),
  ( 38, 'China', 'Chinês'),
  ( 39, 'Chipre', 'Cipriota'),
  ( 40, 'Colômbia', 'Colombiano'),
  ( 41, 'Comores', 'Comoriano'),
  ( 42, 'Coréia do Norte', 'Norte-coreano'),
  ( 43, 'Coréia do Sul', 'Coreano'),
  ( 44, 'Costa do Marfim', 'Costa-marfinense'),
  ( 45, 'Costa Rica', 'Costa-riquenho'),
  ( 46, 'Croácia', 'Croata'),
  ( 47, 'Cuba', 'Cubano'),
  ( 48, 'Dinamarca', 'Dinamarquês'),
  ( 49, 'Djibuti', 'Djibutiense'),
  ( 50, 'Dominica', 'Dominiquense'),
  ( 51, 'Egito', 'Egípcio'),
  ( 52, 'El Salvador', 'Salvadorenho'),
  ( 53, 'Emirados Árabes Unidos', 'árabe'),
  ( 54, 'Equador', 'Equatoriano'),
  ( 55, 'Eritreia', 'Eritreu'),
  ( 56, 'Escócia', 'Escocês'),
  ( 57, 'Eslováquia', 'Eslovaco'),
  ( 58, 'Espanha', 'Espanhol'),
  ( 59, 'Estados Federados da Micronésia', 'Micronésio'),
  ( 60, 'Estados Unidos', 'Americano'),
  ( 61, 'Estônia', 'Estoniano'),
  ( 62, 'Fiji', 'Fijiano'),
  ( 63, 'Finlândia', 'Finlandês'),
  ( 64, 'França', 'Francês'),
  ( 65, 'Gabão', 'Gabonense'),
  ( 66, 'Gâmbia', 'Gambiano'),
  ( 67, 'Geórgia', 'Geórgico'),
  ( 68, 'Granada', 'Granadino'),
  ( 69, 'Grécia', 'Grego'),
  ( 70, 'Guatemala', 'Guatemalteco'),
  ( 71, 'Guiana', 'Guianense'),
  ( 72, 'GuinéBissau', 'Guineense'),
  ( 73, 'Guiné Equatorial', 'Guinéu-equatoriano'),
  ( 74, 'Guiné', 'Guineano'),
  ( 75, 'Haiti', 'Haitiano'),
  ( 76, 'Holanda', 'Holandês'),
  ( 77, 'Honduras', 'Hondurenho'),
  ( 78, 'Hungria', 'Húngaro'),
  ( 79, 'Iêmen', 'Iemenita'),
  ( 80, 'Ilhas Cook', 'Cookiano'),
  ( 81, 'Ilhas Marshall', 'Marshallino'),
  ( 82, 'Ilhas Salomão', 'Salomônico'),
  ( 83, 'Índia', 'Indiano'),
  ( 84, 'Indonésia', 'Indonésio'),
  ( 85, 'Inglaterra', 'Inglês'),
  ( 86, 'Irã', 'Iraniano'),
  ( 87, 'Irlanda', 'Irlandês'),
  ( 88, 'Islândia', 'Islandês'),
  ( 89, 'Israel', 'Israelita'),
  ( 90, 'Itália', 'Italiano'),
  ( 91, 'Jamaica', 'Jamaicano'),
  ( 92, 'Japão', 'Japonês'),
  ( 93, 'Jordânia', 'Jordão'),
  ( 94, 'Kuwait', 'kuwaitiano'),
  ( 95, 'Laos', 'Laosiano'),
  ( 96, 'Lesoto', 'Lesotiano'),
  ( 97, 'Letônia', 'Letoniano'),
  ( 98, 'Líbano', 'Libanês'),
  ( 99, 'Libéria', 'Liberiano'),
  (100, 'Líbia', 'Líbio'),
  (101, 'Liechtenstein', 'Liechtensteinense'),
  (102, 'Lituânia', 'Lituano'),
  (103, 'Luxemburgo', 'Luxemburguês'),
  (104, 'Macedônia', 'Macedônio'),
  (105, 'Madagascar', 'Madagascarense'),
  (106, 'Malásia', 'Malaio'),
  (107, 'Malaui', 'Malauiano'),
  (108, 'Maldivas', 'Maldivo'),
  (109, 'Máli', 'Maliano'),
  (110, 'Malta', 'Maltês'),
  (111, 'Marrocos', 'Marroquino'),
  (112, 'Maurício', 'Mauriciano'),
  (113, 'Mauritânia', 'Mauritano'),
  (114, 'México', 'Mexicano'),
  (115, 'Moçambique', 'Moçambicano'),
  (116, 'Moldavia', 'Moldávio'),
  (117, 'Mônaco', 'Monegasco'),
  (118, 'Mongólia', 'Mongol'),
  (119, 'Montenegro', 'Montenegrino'),
  (120, 'Myanmar', 'Birmanês'),
  (121, 'Namíbia', 'Namibiano'),
  (122, 'Nauru', 'Nauruano'),
  (123, 'Nepal', 'Nepalês'),
  (124, 'Nicarágua', 'Nicaraguense'),
  (125, 'Nigéria', 'Nigeriano'),
  (126, 'Níger', 'Nigerino'),
  (127, 'Niue', 'Niuano'),
  (128, 'Noruega', 'Norueguês'),
  (129, 'Nova Zelândia', 'Neozelandês'),
  (130, 'Omã', 'Omanense'),
  (131, 'País de Gales', 'Galês'),
  (132, 'Palau', 'Palauense'),
  (133, 'Palestina', 'Palestino'),
  (134, 'Panamá', 'Panamenho'),
  (135, 'Papua Nova Guiné', 'Papuásio'),
  (136, 'Paquistão', 'Paquistanês'),
  (137, 'Paraguai', 'Paraguaio'),
  (138, 'Peru', 'Peruano'),
  (139, 'Philippines', 'Filipino'),
  (140, 'Polônia', 'Polonês'),
  (141, 'Portugal', 'Português'),
  (142, 'Quênia', 'Queniano'),
  (143, 'Quirguistão', 'Quirguistanês'),
  (144, 'Quiribati', 'Quiribatiano'),
  (145, 'Reino Unido', 'Britânico'),
  (146, 'República Centro-Africana', 'Centroafricano'),
  (147, 'República Democrática do Congo', 'Congolense'),
  (148, 'República Dominicana', 'Dominicano'),
  (149, 'República Tcheca', 'Tcheco'),
  (150, 'Romênia', 'Romeno'),
  (151, 'Ruanda', 'Ruandês'),
  (152, 'Rússia', 'Russo'),
  (153, 'Samoa', 'Samoano'),
  (154, 'Santa Lúcia', 'Santa-lucense'),
  (155, 'São Cristóvão e Nevis', 'São-cristovense'),
  (156, 'São Marino', 'São-marinense'),
  (157, 'São Tomé e Príncipe', 'São-tomense'),
  (158, 'São Vicente e Granadinas', 'São-vicentino'),
  (159, 'Seicheles', 'Seichelense'),
  (160, 'Senegal', 'Senegalense'),
  (161, 'Serra Leoa', 'Serra-leonês'),
  (162, 'Sérvia', 'Sérvio'),
  (163, 'Singapura', 'Singapurense'),
  (164, 'Síria', 'Sírio'),
  (165, 'Somália', 'Somali'),
  (166, 'Sri Lanka', 'Srilankês'),
  (167, 'Suazilândia', 'Suazi'),
  (168, 'Sudão do Sul', 'Sul-sudanense'),
  (169, 'Sudão', 'Sudanense'),
  (170, 'Suécia', 'Sueco'),
  (171, 'Suíça', 'Suíço'),
  (172, 'Suriname', 'Surinamês'),
  (173, 'Tadiquistão', 'Tajique'),
  (174, 'Tailândia', 'Tailandês'),
  (175, 'Tanzânia', 'Tanzaniano'),
  (176, 'Timor Leste', 'Timorense'),
  (177, 'Togo', 'Togolês'),
  (178, 'Tonga', 'Tonganês'),
  (179, 'Trindade e Tobago', 'Trinitário'),
  (180, 'Tunísia', 'Tunisiano'),
  (181, 'Turcomenistão', 'Turcomeno'),
  (182, 'Turquia', 'Turco'),
  (183, 'Tuvalu', 'Tuvaluano'),
  (184, 'Ucrânia', 'Ucraniano'),
  (185, 'Uganda', 'Ugandês'),
  (186, 'Uruguai', 'Uruguaio'),
  (187, 'Usbequistão', 'Uzbeque'),
  (188, 'Vanuatu', 'Vanuatuano'),
  (189, 'Venezuela', 'Venezuelano'),
  (190, 'Vietnã', 'Vietnamita'),
  (191, 'Zâmbia', 'Zambiano'),
  (192, 'Zimbábue', 'Zimbabueano');

ALTER SEQUENCE erp.countries_countryid_seq RESTART WITH 193;

-- ---------------------------------------------------------------------
-- Vendedores
-- ---------------------------------------------------------------------

-- Modificamos a tabela de entidades para suportar a definição do
-- vendedor
ALTER TABLE erp.entities
  ADD COLUMN seller boolean NOT NULL DEFAULT FALSE;

-- ---------------------------------------------------------------------
-- Função: xor
-- Descrição: Retorna a operação booleana XOR entre dois valores
-- ---------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.XOR(a boolean, b boolean)
RETURNS boolean AS
$BODY$
  SELECT (a and not b) or (b and not a);
$BODY$
LANGUAGE 'sql' IMMUTABLE STRICT;

-- ---------------------------------------------------------------------
-- Equipamentos
-- ---------------------------------------------------------------------

-- Modificamos a tabela de equipamentos para suportar a definição do
-- pagador do equipamento.
ALTER TABLE erp.equipments
  ADD COLUMN customerPayerID integer DEFAULT NULL;
ALTER TABLE erp.equipments
  ADD COLUMN subsidiaryPayerID integer DEFAULT NULL;

-- Incluímos a referência com as referidas tabelas
ALTER TABLE erp.equipments
ADD CONSTRAINT equipments_customerpayerid_fkey
   FOREIGN KEY (customerPayerID) 
    REFERENCES erp.entities(entityID)
     ON DELETE RESTRICT;
ALTER TABLE erp.equipments
ADD CONSTRAINT equipments_subsidiarypayerid_fkey
   FOREIGN KEY (subsidiaryPayerID) 
    REFERENCES erp.subsidiaries(subsidiaryID)
     ON DELETE RESTRICT;

DROP FUNCTION erp.getEquipmentsPerVehicleData(FcontractorID integer,
  FvehicleID integer);
DROP TYPE erp.equipmentPerVehicleData;

CREATE TYPE erp.equipmentPerVehicleData AS
(
  vehicleID              integer,
  plate                  varchar(7),
  equipmentID            integer,
  brandName              char(30),
  modelName              char(50),
  imei                   char(18),
  serialNumber           varchar(30),
  customerPayerID        integer,
  customerPayerName      varchar(100),
  subsidiaryPayerID      integer,
  subsidiaryPayerName    varchar(50),
  nationalRegister       varchar(18),
  installedAt            date,
  installationSite       varchar(100),
  blockingSite           varchar(100),
  sirenSite              varchar(100),
  panicButtonSite        varchar(100)
);

CREATE OR REPLACE FUNCTION erp.getEquipmentsPerVehicleData(FcontractorID integer,
  FvehicleID integer)
RETURNS SETOF erp.equipmentPerVehicleData AS
$$
DECLARE
  equipmentPerVehicleData  erp.equipmentPerVehicleData%rowtype;
  row                      record;
  query                    varchar;
BEGIN
  IF (FcontractorID IS NULL) THEN
    FcontractorID = 0;
  END IF;
  IF (FvehicleID IS NULL) THEN
    FvehicleID = 0;
  END IF;

  -- Monta a consulta
  query := 'SELECT VEHICLE.vehicleID,
                   VEHICLE.plate,
                   EQPTO.equipmentID,
                   MODEL.name AS modelName,
                   BRAND.name AS brandName,
                   EQPTO.imei,
                   EQPTO.serialNumber,
                   EQPTO.customerPayerID,
                   CUSTOMER.name AS customerPayerName,
                   EQPTO.subsidiaryPayerID,
                   SUBSIDIARY.name AS subsidiaryPayerName,
                   SUBSIDIARY.nationalregister,
                   R.installedAt,
                   VEHICLE.installationSite,
                   VEHICLE.blockingSite,
                   VEHICLE.sirenSite,
                   VEHICLE.panicButtonSite
              FROM erp.vehicles AS VEHICLE
              LEFT JOIN erp.equipments AS EQPTO
                     ON VEHICLE.vehicleid = EQPTO.vehicleid
              LEFT JOIN erp.equipmentmodels AS MODEL
                  USING (equipmentModelID)
              LEFT JOIN erp.installationRecords AS R
                     ON (VEHICLE.vehicleid = R.vehicleid AND
                         EQPTO.equipmentID = R.equipmentID AND
                         R.uninstalledAt IS NULL)
              LEFT JOIN erp.entities AS CUSTOMER
                     ON EQPTO.customerPayerID = CUSTOMER.entityid
              LEFT JOIN erp.subsidiaries AS SUBSIDIARY
                     ON EQPTO.subsidiaryPayerID = SUBSIDIARY.subsidiaryID
             INNER JOIN erp.equipmentbrands AS BRAND
                  USING (equipmentBrandID)
             WHERE VEHICLE.contractorID = $1
               AND VEHICLE.vehicleID = $2';
  FOR row IN EXECUTE query USING FcontractorID, FvehicleID
  LOOP
    equipmentPerVehicleData.vehicleID           := row.vehicleID;
    equipmentPerVehicleData.plate               := row.plate;
    equipmentPerVehicleData.equipmentID         := row.equipmentID;
    equipmentPerVehicleData.brandName           := row.brandName;
    equipmentPerVehicleData.modelName           := row.modelName;
    equipmentPerVehicleData.imei                := row.imei;
    equipmentPerVehicleData.serialNumber        := row.serialNumber;
    equipmentPerVehicleData.customerPayerID     := row.customerPayerID;
    equipmentPerVehicleData.customerPayerName   := row.customerPayerName;
    equipmentPerVehicleData.subsidiaryPayerID   := row.subsidiaryPayerID;
    equipmentPerVehicleData.subsidiaryPayerName := row.subsidiaryPayerName;
    equipmentPerVehicleData.nationalRegister    := row.nationalRegister;
    equipmentPerVehicleData.installedAt         := row.installedAt;
    equipmentPerVehicleData.installationSite    := row.installationSite;
    equipmentPerVehicleData.blockingSite        := row.blockingSite;
    equipmentPerVehicleData.sirenSite           := row.sirenSite;
    equipmentPerVehicleData.panicButtonSite     := row.panicButtonSite;

    RETURN NEXT equipmentPerVehicleData;
  END loop;
END
$$
LANGUAGE 'plpgsql';

-- Acrescentamos uma tabela onde vamos registrar as datas de instalação
-- e desinstalação de um equipamento em um veículo

-- ---------------------------------------------------------------------
-- Registros de instalação
-- ---------------------------------------------------------------------
-- Armazena as informações de quando um determinado equipamento foi
-- instalado em um veículo e quando o mesmo foi retirado. Esta tabela é
-- utilizada para determinar os períodos de cobrança dos serviços.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.installationRecords (
  installationRecordID  serial,         -- O ID do registro de instalação
  contractorID          integer         -- ID do contratante
                        NOT NULL,
  equipmentID           integer         -- ID do equipamento
                        NOT NULL,
  vehicleID             integer         -- ID do veículo
                        NOT NULL,
  installedAt           date            -- A data da instalação
                        NOT NULL,
  uninstalledAt         date            -- A data da desinstalação
                        DEFAULT NULL,
  createdAt             timestamp       -- A data de criação do equipamento
                        NOT NULL
                        DEFAULT CURRENT_TIMESTAMP,
  createdByUserID       integer         -- O ID do usuário responsável
                        NOT NULL,       -- pelo cadastro deste equipamento
  updatedAt             timestamp       -- A data de modificação do
                        NOT NULL        -- equipamento
                        DEFAULT CURRENT_TIMESTAMP,
  updatedByUserID       integer         -- O ID do usuário responsável pela
                        NOT NULL,       -- última modificação
  PRIMARY KEY (installationRecordID),
  FOREIGN KEY (contractorID)
    REFERENCES erp.entities(entityID)
    ON DELETE RESTRICT,
  FOREIGN KEY (equipmentID)
    REFERENCES erp.equipments(equipmentID)
    ON DELETE RESTRICT,
  FOREIGN KEY (vehicleID)
    REFERENCES erp.vehicles(vehicleID)
    ON DELETE RESTRICT,
  FOREIGN KEY (createdByUserID)
    REFERENCES erp.users(userID)
    ON DELETE RESTRICT,
  FOREIGN KEY (updatedByUserID)
    REFERENCES erp.users(userID)
    ON DELETE RESTRICT
);


-- ---------------------------------------------------------------------
-- Veículos
-- ---------------------------------------------------------------------

-- Modificamos a tabela de veículos para suportar a definição do local
-- principal onde o veículo permanece, a saber:
--   * O mesmo endereço do cliente
--   * O mesmo endereço do proprietário do veículo (se o proprietário
--     não for o próprio cliente)
--   * Outro endereço
-- Isto é utilizado para permitir sugerir o endereço para manutenções
-- quanto da necessidade de envio de técnico numa Ordem de Serviço
ALTER TABLE erp.vehicles
  ADD COLUMN atSameCustomerAddress boolean
    DEFAULT true;
ALTER TABLE erp.vehicles
  ADD COLUMN atSameOwnerAddress boolean
    DEFAULT false;
ALTER TABLE erp.vehicles
  ADD COLUMN atAnotherAddress boolean
    DEFAULT false;
ALTER TABLE erp.vehicles
  ADD CONSTRAINT vehicle_location_exclusive_check
  CHECK (XOR(atSameCustomerAddress, atSameOwnerAddress)
     OR XOR(atSameOwnerAddress, atAnotherAddress));
ALTER TABLE erp.vehicles
  ADD CONSTRAINT vehicle_customeristheowner_check
  CHECK (XOR(customerIsTheOwner, atSameOwnerAddress)
     OR (atSameCustomerAddress OR atAnotherAddress));
ALTER TABLE erp.vehicles
  ADD COLUMN installationSite varchar(100) DEFAULT NULL;
ALTER TABLE erp.vehicles
  ADD COLUMN blockingSite varchar(100) DEFAULT NULL;
ALTER TABLE erp.vehicles
  ADD COLUMN sirenSite varchar(100) DEFAULT NULL;
ALTER TABLE erp.vehicles
  ADD COLUMN panicButtonSite varchar(100) DEFAULT NULL;

-- Modificamos o endereço do proprietário
-- O número do endereço do proprietário
ALTER TABLE erp.vehicles
  ADD COLUMN streetNumber varchar(10);
-- O complemento do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN complement varchar(30);

-- Adicionamos o endereço do local
-- O nome do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherName varchar(100);
-- O endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherAddress varchar(50);
-- O número do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherStreetNumber varchar(10);
-- O complemento do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherComplement varchar(30);
-- O bairro do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherDistrict varchar(50);
-- O CEP do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherPostalCode char(9);
-- O ID da cidade do endereço do local
ALTER TABLE erp.vehicles
  ADD COLUMN anotherCityID integer;

-- Adicionamos um campo para observações
ALTER TABLE erp.vehicles
  ADD COLUMN note text;

-- Removemos a função de obtenção dos dados de veículos
DROP FUNCTION erp.getVehiclesData(FcontractorID integer,
  FcustomerID integer, FsubsidiaryID integer, FvehicleID integer,
  FsearchValue varchar(100), FsearchField varchar(20),
  FOrder varchar, Skip integer, LimitOf integer);
DROP TYPE erp.vehicleData;

-- Recriamos novamente
CREATE TYPE erp.vehicleData AS
(
  vehicleID          integer,
  contractorID       integer,
  contractorName     varchar(100),
  contractorBlocked  boolean,
  customerID         integer,
  customerName       varchar(100),
  customerBlocked    boolean,
  customerTypeID     integer,
  customerTypeName   varchar(30),
  cooperative        boolean,
  juridicalperson    boolean,
  subsidiaryID       integer,
  subsidiaryName     varchar(100),
  subsidiaryBlocked  boolean,
  affiliated         boolean,
  plate              varchar(7),
  vehicleTypeID      integer,
  vehicleTypeName    varchar(30),
  vehicleBrandID     integer,
  vehicleBrandName   varchar(30),
  vehicleModelID     integer,
  vehicleModelName   varchar(50),
  vehicleColorID     integer,
  vehicleColorName   varchar(30),
  vehicleColor       varchar(30),
  carNumber          varchar(20),
  fuelType           char(1),
  fuelTypeName       varchar(30),
  vehicleBlocked     boolean,
  blockedLevel       smallint,
  createdAt          timestamp,
  updatedAt          timestamp,
  fullcount          integer
);

CREATE OR REPLACE FUNCTION erp.getVehiclesData(FcontractorID integer,
  FcustomerID integer, FsubsidiaryID integer, FvehicleID integer,
  FsearchValue varchar(100), FsearchField varchar(20), Finstalled boolean,
  Factive boolean, FOrder varchar, Skip integer, LimitOf integer)
RETURNS SETOF erp.vehicleData AS
$$
DECLARE
  vehicleData  erp.vehicleData%rowtype;
  row          record;
  query        varchar;
  field        varchar;
  filter       varchar;
  limits       varchar;
  blockedLevel integer;
BEGIN
  IF (FcontractorID IS NULL) THEN
    FcontractorID = 0;
  END IF;
  IF (FcustomerID IS NULL) THEN
    FcustomerID = 0;
  END IF;
  IF (FsubsidiaryID IS NULL) THEN
    FsubsidiaryID = 0;
  END IF;
  IF (FvehicleID IS NULL) THEN
    FvehicleID = 0;
  END IF;
  IF (FOrder IS NULL) THEN
    FOrder = 'customer.name ASC, subsidiary.subsidiaryid ASC, vehicles.plate ASC';
  END IF;
  IF (LimitOf > 0) THEN
    limits := format('LIMIT %s OFFSET %s',
                     LimitOf, Skip);
  ELSE
    limits := '';
  END IF;
  filter := '';
  
  IF (FvehicleID > 0) THEN
    filter := format(' AND vehicles.vehicleID = %s',
                    FvehicleID);
  ELSE
    -- Realiza a filtragem por cliente
    IF (FcustomerID > 0) THEN
      filter := format(' AND customer.entityID = %s',
                      FcustomerID);
      IF (FsubsidiaryID > 0) THEN
        filter := filter || format(' AND subsidiary.subsidiaryID = %s',
                                  FsubsidiaryID);
      END IF;
    END IF;
  END IF;

  IF (FsearchValue IS NULL) THEN
    -- RAISE NOTICE 'FsearchValue IS NULL';
  ELSE
    -- RAISE NOTICE 'FsearchValue IS NOT NULL';
    IF (FsearchValue = '') THEN
      -- RAISE NOTICE 'FsearchValue IS EMPTY';
    ELSE
      -- Determina o campo onde será realizada a pesquisa
      CASE (FsearchField)
        WHEN 'vehicleBrandName' THEN
          field := 'vehicleBrands.name';
        WHEN 'vehicleModelName' THEN
          field := 'vehicleModels.name';
        ELSE
          field := 'vehicles.' || FsearchField;
      END CASE;
      -- Monta o filtro
      filter := filter || format(' AND public.unaccented(%s) ILIKE public.unaccented(''%%%s%%'')',
                                  field, FsearchValue);
    END IF;
  END IF;
  -- RAISE NOTICE 'filter IS %', filter;

  IF (Factive IS NOT NULL) THEN
    IF (Factive = TRUE) THEN
      -- Adiciona a opção de filtragem de veículos ativos
      filter := filter || ' AND vehicles.blocked = false';
    ELSE
      -- Adiciona a opção de filtragem de veículos inativos
      filter := filter || ' AND vehicles.blocked = true';
    END IF;
  END IF;

  IF (Finstalled IS NOT NULL) THEN
    -- Selecionamos, segundo as regras, apenas os veículos que possuem
    -- ao menos um rastreador instalado
    EXECUTE 'CREATE TEMPORARY TABLE trackedVehicles AS (
             SELECT E.vehicleID
               FROM erp.equipments AS E
              INNER JOIN erp.vehicles ON (vehicles.vehicleID = E.vehicleID)
              INNER JOIN erp.entities AS contractor ON (vehicles.contractorID = contractor.entityID)
              INNER JOIN erp.entities AS customer ON (vehicles.customerID = customer.entityID)
              INNER JOIN erp.subsidiaries AS subsidiary ON (vehicles.subsidiaryID = subsidiary.subsidiaryID)
              INNER JOIN erp.vehicleBrands ON (vehicles.vehicleBrandID = vehicleBrands.vehicleBrandID)
              INNER JOIN erp.vehicleModels ON (vehicles.vehicleModelID = vehicleModels.vehicleModelID)
              WHERE E.storageLocation = ''Installed''
                AND vehicles.contractorID = $1
                AND vehicles.deleted = false
                AND customer.deleted = false
                AND subsidiary.deleted = false ' || filter || ');'
      USING fContractorID;
    
    -- Adiciona a opção de filtragem de veículos com ao menos um rastreados
    filter := filter || ' AND vehicles.vehicleID IN (SELECT vehicleID FROM trackedVehicles)';
  END IF;

  -- Monta a consulta
  query := format('SELECT vehicles.vehicleID,
                          vehicles.contractorID,
                          contractor.name AS contractorName,
                          contractor.blocked AS contractorBlocked,
                          vehicles.customerID,
                          customer.name AS customerName,
                          customer.blocked AS customerBlocked,
                          customer.entityTypeID AS customerTypeID,
                          customerType.name AS customerTypeName,
                          customerType.juridicalperson,
                          customerType.cooperative,
                          vehicles.subsidiaryID,
                          subsidiary.name AS subsidiaryName,
                          subsidiary.blocked AS subsidiaryBlocked,
                          subsidiary.affiliated,
                          vehicles.plate,
                          vehicles.vehicleTypeID,
                          vehicleTypes.name AS vehicleTypeName,
                          vehicles.vehicleBrandID,
                          vehicleBrands.name AS vehicleBrandName,
                          vehicles.vehicleModelID,
                          vehicleModels.name AS vehicleModelName,
                          vehicles.vehicleColorID,
                          vehicleColors.name AS vehicleColorName,
                          vehicleColors.color AS vehicleColor,
                          vehicles.carNumber,
                          vehicles.fuelType,
                          fuelTypes.name AS fuelTypeName,
                          vehicles.blocked AS vehicleBlocked,
                          vehicles.createdAt,
                          vehicles.updatedAt,
                          count(*) OVER() AS fullcount
                     FROM erp.vehicles
                    INNER JOIN erp.entities AS contractor ON (vehicles.contractorID = contractor.entityID)
                    INNER JOIN erp.entities AS customer ON (vehicles.customerID = customer.entityID)
                    INNER JOIN erp.entitiesTypes AS customerType ON (customer.entityTypeID = customerType.entityTypeID)
                    INNER JOIN erp.subsidiaries AS subsidiary ON (vehicles.subsidiaryID = subsidiary.subsidiaryID)
                    INNER JOIN erp.vehicleTypes ON (vehicles.vehicleTypeID = vehicleTypes.vehicleTypeID)
                    INNER JOIN erp.vehicleBrands ON (vehicles.vehicleBrandID = vehicleBrands.vehicleBrandID)
                    INNER JOIN erp.vehicleModels ON (vehicles.vehicleModelID = vehicleModels.vehicleModelID)
                    INNER JOIN erp.vehicleColors ON (vehicles.vehicleColorID = vehicleColors.vehicleColorID)
                    INNER JOIN erp.fuelTypes ON (vehicles.fuelType = fuelTypes.fuelType)
                    WHERE vehicles.contractorID = %s
                      AND vehicles.deleted = false
                      AND customer.deleted = false
                      AND subsidiary.deleted = false %s
                    ORDER BY %s %s',
                  fContractorID, filter, FOrder, limits);
  FOR row IN EXECUTE query
  LOOP
    vehicleData.vehicleID          := row.vehicleID;
    vehicleData.contractorID       := row.contractorID;
    vehicleData.contractorName     := row.contractorName;
    vehicleData.contractorBlocked  := row.contractorBlocked;
    vehicleData.customerID         := row.customerID;
    vehicleData.customerName       := row.customerName;
    vehicleData.customerBlocked    := row.customerBlocked;
    vehicleData.customerTypeID     := row.customerTypeID;
    vehicleData.customerTypeName   := row.customerTypeName;
    vehicleData.juridicalperson    := row.juridicalperson;
    vehicleData.cooperative        := row.cooperative;
    vehicleData.subsidiaryID       := row.subsidiaryID;
    vehicleData.subsidiaryName     := row.subsidiaryName;
    vehicleData.subsidiaryBlocked  := row.subsidiaryBlocked;
    vehicleData.affiliated         := row.affiliated;
    vehicleData.plate              := row.plate;
    vehicleData.vehicleTypeID      := row.vehicleTypeID;
    vehicleData.vehicleTypeName    := row.vehicleTypeName;
    vehicleData.vehicleBrandID     := row.vehicleBrandID;
    vehicleData.vehicleBrandName   := row.vehicleBrandName;
    vehicleData.vehicleModelID     := row.vehicleModelID;
    vehicleData.vehicleModelName   := row.vehicleModelName;
    vehicleData.vehicleColorID     := row.vehicleColorID;
    vehicleData.vehicleColorName   := row.vehicleColorName;
    vehicleData.vehicleColor       := row.vehicleColor;
    vehicleData.carNumber          := row.carNumber;
    vehicleData.fuelType           := row.fuelType;
    vehicleData.fuelTypeName       := row.fuelTypeName;
    vehicleData.vehicleBlocked     := row.vehicleBlocked;
    -- RAISE NOTICE 'Contractor %', row.contractorBlocked;
    -- RAISE NOTICE 'Vehicle %', row.vehicleBlocked;
    -- RAISE NOTICE 'Subsidiary %', row.subsidiaryBlocked;

    -- Determina o nível de bloqueio. O nível de bloqueio mais baixo é o
    -- do veículo, seguido da unidade/filial do cliente, da empresa e
    -- por último o contratante
    blockedLevel := 0;
    IF (row.vehicleBlocked) THEN
      blockedLevel := blockedLevel|1;
    END IF;
    IF (row.subsidiaryBlocked) THEN
      blockedLevel := blockedLevel|2;
    END IF;
    IF (row.customerBlocked) THEN
      blockedLevel := blockedLevel|4;
    END IF;
    IF (row.contractorBlocked) THEN
      blockedLevel := blockedLevel|8;
    END IF;
    vehicleData.blockedLevel       := blockedLevel;
    vehicleData.createdAt          := row.createdAt;
    vehicleData.updatedAt          := row.updatedAt;
    vehicleData.fullcount          := row.fullcount;

    RETURN NEXT vehicleData;
  END loop;

  IF (Finstalled IS NOT NULL) THEN
    EXECUTE 'DROP TABLE trackedVehicles;';
  END IF;
END
$$
LANGUAGE 'plpgsql';


-- ---------------------------------------------------------------------
-- Unidades/filiais
-- ---------------------------------------------------------------------
-- Modificamos o endereço da entidade, complementando os campos
-- O número da casa do endereço
ALTER TABLE erp.subsidiaries
  ADD COLUMN streetNumber varchar(10);
-- O complemento do endereço
ALTER TABLE erp.subsidiaries
  ADD COLUMN complement varchar(30);
-- O gênero da pessoa (para pessoas físicas)
ALTER TABLE erp.subsidiaries
  ADD COLUMN genderID integer;
-- O estado civil da pessoa (para pessoas físicas)
ALTER TABLE erp.subsidiaries
  ADD COLUMN maritalStatusID integer;
-- A data de nascimento da pessoa (para pessoas físicas)
ALTER TABLE erp.subsidiaries
  ADD COLUMN birthday date;
-- A inscrição municipal (para pessoas jurídicas)
ALTER TABLE erp.subsidiaries
  ADD COLUMN municipalInscription varchar(15);

-- Inicialmente todos os gêneros e estados civis como não informado para
-- as unidades/filiais de entidades que sejam pessoa física
WITH physicalPersons AS (
  SELECT subsidiaries.subsidiaryid
  FROM erp.subsidiaries
 INNER JOIN erp.entities USING (entityID)
 INNER JOIN erp.entitiesTypes USING (entityTypeID)
 WHERE entitiesTypes.juridicalperson = true
)
UPDATE erp.subsidiaries
   SET genderID = 1,
       maritalStatusID = 1
  FROM physicalPersons
 WHERE subsidiaries.subsidiaryid = physicalPersons.subsidiaryid;

-- Incluímos a referência com as referidas tabelas
ALTER TABLE erp.subsidiaries
ADD CONSTRAINT subsidiaries_genderid_fkey
   FOREIGN KEY (genderID) 
    REFERENCES erp.genders(genderID)
     ON DELETE RESTRICT;
ALTER TABLE erp.subsidiaries
ADD CONSTRAINT subsidiaries_maritalstatusid_fkey
   FOREIGN KEY (maritalStatusID) 
    REFERENCES erp.maritalStatus(maritalStatusID)
     ON DELETE RESTRICT;

-- Incluímos os campos para identificar os dados da pessoa de contato
-- quando pessoa jurídica
ALTER TABLE erp.subsidiaries
  ADD COLUMN personName varchar(50);
-- O departamento onde a mesma trabalha
ALTER TABLE erp.subsidiaries
  ADD COLUMN department varchar(50);

-- ---------------------------------------------------------------------
-- Entidades
-- ---------------------------------------------------------------------
-- Adicionamos um campo para observações
ALTER TABLE erp.entities
  ADD COLUMN note text;

-- ---------------------------------------------------------------------
-- E-mails adicionais por unidade/filial
-- ---------------------------------------------------------------------
-- Contém as informações dos e-mails adicionais por unidade/filial.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.mailings (
  mailingID     serial,        -- O ID do e-mail
  entityID      integer        -- O ID da entidade à qual pertence este
                NOT NULL,      -- e-mail
  subsidiaryID  integer        -- O ID da unidade/filial  à qual pertence
                NOT NULL,      -- este e-mail
  email         varchar(100)   -- O endereço de e-mail
                NOT NULL,
  CHECK (POSITION(' ' IN email) = 0),
  PRIMARY KEY (mailingID),
  FOREIGN KEY (entityID)
    REFERENCES erp.entities(entityID)
    ON DELETE RESTRICT,
  FOREIGN KEY (subsidiaryID)
    REFERENCES erp.subsidiaries(subsidiaryID)
    ON DELETE RESTRICT
);

-- Transferimos todos os e-mail que estão na tabela principal para a
-- nova tabela
INSERT INTO erp.mailings (entityID, subsidiaryID, email)
SELECT entityID, subsidiaryID, email
  FROM erp.subsidiaries
 WHERE trim(subsidiaries.email) <> '';

-- Por último, excluímos a coluna de e-mail da tabela de unidades/filiais
ALTER TABLE erp.subsidiaries
DROP COLUMN email;

-- Novos subtipos
INSERT INTO erp.vehicleSubTypes (vehicleTypeID, name) VALUES
  ( 4, 'Trator'),
  ( 4, 'Motoniveladora'),
  ( 4, 'Pá-Carregadeira'),
  ( 4, 'Retro Escavadeira'),
  ( 4, 'Mini-Carregadeira'),
  ( 4, 'Escavadeira'),
  ( 4, 'Empilhadeira'),
  ( 4, 'Compactador'),
  ( 4, 'Máquina de Corte de Asfalto'),
  ( 5, 'Aeronave'),
  ( 6, 'Embarcação'),
  -- ( 7, 'Gerador'),
  -- ( 7, 'Motobomba'),
  -- ( 7, 'Roçadeira'),
  -- ( 7, 'Motossera'),
  -- ( 7, 'Pulverizador'),
  -- ( 7, 'Compactador de Mão'),
  ( 7, 'Motor de Popa');

ALTER TABLE erp.vehiclebrands
      ALTER COLUMN fipeName DROP NOT NULL;

ALTER TABLE erp.billingTypes
      DROP COLUMN fidelity;

-- ---------------------------------------------------------------------
-- Planos de serviços
-- ---------------------------------------------------------------------
-- Os planos nos permitem controlar os valores cobrados por cada serviço
-- prestado ao cliente. Ao adquirir um plano, o cliente estabelece um
-- contrato onde as condições do plano são aplicadas. Cada plano prevê
-- um preço a ser cobrado por mês (base) e pode prever planos de
-- assinaturas maiores (ex: 3 meses, 6 meses ou 1 ano) que são pagas de
-- uma única vêz, mas que garante ao cliente um desconto pelo serviço
-- que será prestado por um período estipulado.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.plans (
  planID                      serial,          -- ID do plano
  contractorID                integer          -- ID do contratante
                              NOT NULL,
  name                        varchar(50)      -- Nome do plano
                              NOT NULL,
  description                 text,            -- Uma descrição do plano
  monthPrice                  numeric(12,2),   -- Valor mensal
  duration                    smallint         -- Duração do contrato (em
                              NOT NULL         -- meses)
                              DEFAULT 12,
  loyaltyPeriod               smallint         -- Duração do período de
                              NOT NULL         -- fidelidade (em meses)
                              DEFAULT 0,
  loyaltyFine                 numeric(8,4)     -- O valor na multa cobrado
                              NOT NULL         -- em caso de rompimento antes
                              DEFAULT 10.0000, -- do final do período
  indicatorID                 integer          -- O ID do indicador financeiro
                              NOT NULL,        -- a ser utilizado para reajuste
  readjustmentPeriod          smallint         -- O período de meses após o
                              NOT NULL         -- qual se aplica o reajuste
                              DEFAULT 12,
  readjustWithSingleValue     boolean          -- O indicativo de que o reajuste
                              DEFAULT false,   -- irá ocorrer com um valor único
  fineValue                   numeric(8,4)     -- Taxa de multa a ser cobrado
                              NOT NULL         -- sobre o valor devido em
                              DEFAULT 0.0000,  -- caso de atraso no pagamento
  arrearInterest              numeric(8,4)     -- Taxa diária dos juros de
                              NOT NULL         -- mora que incidirão sobre
                              DEFAULT 0.0333,  -- o valor devido em caso de
                                               -- atraso no pagamento
  drivingPositioningInterval  smallint         -- O intervalo de transmissão
                              NOT NULL         -- quando o veículo está com
                              DEFAULT 60,      -- a ignição ligada (em segundos)
  stoppedPositioningInterval  smallint         -- O intervalo de transmissão
                              NOT NULL         -- quando o veículo está com
                              DEFAULT 3600,    -- a ignição desligada
  allowExtendingDeadline      boolean          -- Flag indicador de permissão
                              NOT NULL         -- para estender prazo de
                              DEFAULT false,   -- boletos vencidos
  dueDateOnlyInWorkingDays    boolean          -- Flag indicador de
                              NOT NULL         -- vencimento apenas em dias
                              DEFAULT true,    -- úteis
  prorata                     boolean          -- Flag indicador de cobrança
                              NOT NULL         -- proporcional aos dias
                              DEFAULT true,    -- contratados
  active                      boolean          -- Flag indicador de plano
                              NOT NULL         -- ativo
                              DEFAULT false,
  createdAt                   timestamp        -- A data de criação do
                              NOT NULL         -- plano
                              DEFAULT CURRENT_TIMESTAMP,
  createdByUserID             integer          -- O ID do usuário responsável
                              NOT NULL,        -- pelo cadastro deste plano
  updatedAt                   timestamp        -- A data de modificação do
                              NOT NULL         -- plano
                              DEFAULT CURRENT_TIMESTAMP,
  updatedByUserID             integer          -- O ID do usuário responsável
                              NOT NULL,        -- pela última modificação
                                               -- deste modelo de contrato
  deleted                     boolean          -- Flag indicador de plano
                              NOT NULL         -- apagado
                              DEFAULT false,
  deletedAt                   timestamp        -- A data de remoção
                              DEFAULT NULL,
  deletedByUserID             integer          -- O ID do usuário
                              DEFAULT NULL,    -- responsável pela remoção
  PRIMARY KEY (planID),
  FOREIGN KEY (contractorID)
    REFERENCES erp.entities(entityID)
    ON DELETE RESTRICT,
  FOREIGN KEY (indicatorID)
    REFERENCES erp.indicators(indicatorID)
    ON DELETE RESTRICT,
  FOREIGN KEY (createdByUserID)
    REFERENCES erp.users(userID)
    ON DELETE RESTRICT,
  FOREIGN KEY (updatedByUserID)
    REFERENCES erp.users(userID)
    ON DELETE RESTRICT,
  FOREIGN KEY (deletedByUserID)
    REFERENCES erp.users(userID)
    ON DELETE RESTRICT
);

INSERT INTO erp.plans (planID, contractorID, name, description,
  monthPrice, duration, loyaltyPeriod, loyaltyFine, indicatorID,
  readjustmentPeriod, readjustWithSingleValue, fineValue, arrearInterest,
  drivingPositioningInterval, stoppedPositioningInterval, 
  allowExtendingDeadline, dueDateOnlyInWorkingDays, prorata, active,
  createdByUserID, updatedByUserID) VALUES
  (1, 1, 'Básico',
    'Serviço de rastreamento básico (sem bloqueio):\n' ||
    ' - Localização em tempo real 24 horas por dia;\n' ||
    ' - Cobertura nacional;\n' ||
    ' - Histórico de percurso;', 65.00, 12, 12, 10.0000, 2, 12, false,
    2.0000, 0.0333, 1*60, 60*60, false, true, true, true,  1, 1),
  (2, 1, 'Ligh',
    'Serviço de rastreamento light (sem bloqueio):\n' ||
    ' - Localização em tempo real 24 horas por dia;\n' ||
    ' - Cobertura nacional;\n' ||
    ' - Histórico de percurso;', 30.00, 12, 12, 10.0000, 2, 12, false,
    2.0000, 0.0333, 1*60, 60*60, false, true, true, true,  1, 1),
  (3, 1, 'Avançado',
    'Serviço de rastreamento avançado:\n' ||
    ' - Localização em tempo real 24 horas por dia;\n' ||
    ' - Cobertura nacional;\n' ||
    ' - Histórico de percurso;\n' ||
    ' - Controle de jornada;\n', 80.00, 12, 12, 10.0000, 2, 12, false,
    2.0000, 0.0333, 1*60, 60*60, false, true, true, true,  1, 1);

ALTER SEQUENCE erp.plans_planid_seq RESTART WITH 4;


-- ---------------------------------------------------------------------
-- Planos de assinatura
-- ---------------------------------------------------------------------
-- Um plano de assinatura oferece descontos em relação ao valor base de
-- um plano para o cliente que contratar, pagando antecipadamente, por
-- um período de meses o referido plano.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.subscriptionPlans (
  subscriptionPlanID  serial,         -- ID da assinatura disponível por plano
  planId              integer         -- O ID do plano
                      NOT NULL,
  numberOfMonths      smallint        -- O tempo da assinatura em meses
                      NOT NULL
                      DEFAULT 1,
  discountRate        numeric(8,4)    -- A taxa de desconto
                      NOT NULL        -- oferecida
                      DEFAULT 0.0000,
  PRIMARY KEY (subscriptionPlanID),
  FOREIGN KEY (planID)
    REFERENCES erp.plans(planID)
    ON DELETE CASCADE
);

INSERT INTO erp.subscriptionPlans (planID,
  numberOfMonths, discountRate) VALUES
  (1,  1,  0.0000),
  (1,  3,  3.0000),
  (1,  6,  5.0000),
  (1, 12, 10.0000),
  (2,  1,  0.0000),
  (3,  1,  0.0000),
  (3,  3,  3.0000),
  (3,  6,  5.0000),
  (3, 12, 10.0000);

-- ---------------------------------------------------------------------
-- Tarifas cobradas por plano
-- ---------------------------------------------------------------------
-- Contém as informações das tarifas cobradas para um determinado plano
-- de serviços. Estes valores são cobrados conforme estipulado.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.planCharges (
  planChargeID    serial,         -- ID da tarifa cobrada no plano
  planID          integer         -- ID do plano
                  NOT NULL,
  name            varchar(30)     -- Nome da tarifa a ser cobrada
                  NOT NULL,
  billingTypeID   integer         -- Número de identificação do
                  NOT NULL,       -- tipo de cobrança
  chargeValue     numeric(12,2)   -- Valor cobrado
                  NOT NULL
                  DEFAULT 0.00,
  createdAt       timestamp       -- A data de criação da tarifa
                  NOT NULL        -- no contrato
                  DEFAULT CURRENT_TIMESTAMP,
  createdByUserID integer         -- O ID do usuário responsável pelo
                  NOT NULL,       -- cadastro desta tarifa
  updatedAt       timestamp       -- A data de modificação da tarifa
                  NOT NULL
                  DEFAULT CURRENT_TIMESTAMP,
  updatedByUserID integer         -- O ID do usuário responsável pela
                  NOT NULL,       -- última modificação desta tarifa
  PRIMARY KEY (planChargeID),
  FOREIGN KEY (planID)
    REFERENCES erp.plans(planID)
    ON DELETE CASCADE,
  FOREIGN KEY (billingTypeID)
    REFERENCES erp.billingTypes(billingTypeID)
    ON DELETE RESTRICT
);

INSERT INTO erp.planCharges (planID, name, billingTypeID, chargeValue, createdByUserID, updatedByUserID) VALUES
  ( 1, 'Adesão', 1, 120.00, 1, 1),
  ( 1, 'Taxa de instalação', 4, 0.00, 1, 1),
  ( 1, 'Taxa de manutenção', 5, 50.00, 1, 1),
  ( 1, 'Taxa de reinstalação', 5, 50.00, 1, 1),
  ( 1, 'Transferência de equipamento', 5, 50.00, 1, 1),
  ( 1, 'Retirada de equipamento', 6, 0.00, 1, 1),
  ( 2, 'Adesão', 1, 120.00, 1, 1),
  ( 2, 'Taxa de instalação', 4, 0.00, 1, 1),
  ( 2, 'Taxa de manutenção', 5, 50.00, 1, 1),
  ( 2, 'Taxa de reinstalação', 5, 50.00, 1, 1),
  ( 2, 'Transferência de equipamento', 5, 50.00, 1, 1),
  ( 2, 'Retirada de equipamento', 6, 0.00, 1, 1),
  ( 3, 'Adesão', 1, 120.00, 1, 1),
  ( 3, 'Taxa de instalação', 4, 0.00, 1, 1),
  ( 3, 'Taxa de manutenção', 5, 50.00, 1, 1),
  ( 3, 'Taxa de reinstalação', 5, 50.00, 1, 1),
  ( 3, 'Transferência de equipamento', 5, 50.00, 1, 1),
  ( 3, 'Retirada de equipamento', 6, 0.00, 1, 1);

-- ---------------------------------------------------------------------
-- Características técnicas por plano
-- ---------------------------------------------------------------------
-- Cada plano possui um conjunto de características técnicas que nos
-- permitem determinar quais modelos de equipamentos atendem a estes
-- requisitos.
-- ---------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS erp.planFeatures (
  planFeatureID  serial,         -- ID da característica técnica do plano
  planID         integer         -- ID do plano
                 NOT NULL,
  featureID      integer         -- ID da característica técnica
                 NOT NULL,
  PRIMARY KEY (planFeatureID),
  FOREIGN KEY (planID)
    REFERENCES erp.plans(planID)
    ON DELETE CASCADE
);

INSERT INTO erp.planFeatures (planID, featureID) VALUES
  (1,  1),
  (1,  7),
  (1, 11),
  (2,  1),
  (2,  7),
  (2, 11),
  (3,  1),
  (3,  2),
  (3,  3),
  (3,  4),
  (3,  7),
  (3, 11),
  (3, 20);
