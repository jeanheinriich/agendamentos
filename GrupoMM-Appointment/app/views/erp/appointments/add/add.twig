{% extends 'templates/erp/layout.twig' %}

{% block title %}{{ parent() }} - Novo Agendamento{% endblock %}

{% set getCustomerAutocomplete = { 'URL': 'ERP\\Cadastre\\Entities\\Autocompletion\\Get', 'method': 'PATCH' } %}
{% set getVehicleCompletion      = { 'URL': 'ERP\\Cadastre\\Vehicles\\Autocompletion\\Get', 'method': 'PATCH' } %}

{% block stylesheets %}
  {{ parent() }}
  {{ css('libs/jquery/plugins/autocomplete/autocomplete.min.css') }}
  {{ css('libs/semantic-ui/components/calendar.min.css') }}
  
  <style>
    /* Estilos para o formulário de agendamentos */
    .ui.form .fields .field .ui.calendar {
      width: 100%;
    }
    
    /* Seções do formulário */
    .section-block {
      margin-bottom: 2em;
      padding: 1.5em;
    }
    
    .section-block:last-of-type {
      margin-bottom: 1em;
    }
    
    /* Blocos de detalhes */
    .details-block {
      margin-top: 1em;
      padding: 1em;
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: .28571429rem;
      display: none;
    }
    
    .details-block.active {
      display: block;
    }
    
    .details-block h4 {
      margin-top: 0;
      color: #2185d0;
      font-size: 1em;
    }
    
    .details-block p {
      margin-bottom: 0.5em;
      font-size: 0.95em;
    }
    
    /* Autocomplete customizations */
    .ui.search .results .result {
      padding: 0.85714286em 1.14285714em;
    }
    
    .ui.search .results .result .content .title {
      font-weight: bold;
      color: #1e70bf;
      font-size: 1.1em;
    }
    
    .ui.search .results .result .content .description {
      margin-top: 0.3em;
      color: #767676;
      font-size: 0.9em;
    }
    
    /* Estados do formulário */
    .field.error .ui.dropdown,
    .field.error .ui.input input,
    .field.error input,
    .field.error textarea,
    .field.error select {
      background: #fff6f6;
      border-color: #e0b4b4;
      color: #9f3a38;
    }
    
    .helper {
      color: #9f3a38;
      font-size: 0.92857143em;
      margin-top: 0.25em;
      display: block;
    }
    
    /* Mensagens informativas */
    .ui.info.message {
      background-color: #f8ffff;
    }
    
    /* Dropdown de técnicos */
    .technician-item .description {
      color: #767676;
      font-size: 0.9em;
    }
    
    .technician-item .text {
      font-weight: 500;
    }
    
    .technician-location {
      font-style: italic;
      color: #2185d0;
    }
    
    /* Seção oculta */
    .hidden-section {
      display: none !important;
    }
    
    /* Loading */
    .loading-overlay {
      position: relative;
    }
    
    .loading-overlay.loading::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.8);
      z-index: 1000;
    }
    
    /* MELHORIAS UX: Estilo do ícone dropdown */
    .ui.search.dropdown-style .icon {
      cursor: pointer;
      transition: transform 0.2s ease;
    }
    
    .ui.search.dropdown-style .icon:hover {
      color: #2185d0;
    }
    
    /* Rotação do ícone quando dropdown aberto */
    .ui.search.dropdown-style.active .icon.dropdown {
      transform: rotate(180deg);
    }
    
    /* Cursor pointer para campos clicáveis */
    .ui.search.dropdown-style input {
      cursor: pointer;
    }
    
    /* Melhor visual para resultados vazios */
    .ui.search > .results .message {
      padding: 1em;
      font-size: 1em;
      color: #767676;
    }
    
    /* Estilos para dropdown de serviços */
    #service_type optgroup {
      font-weight: bold;
      color: #2185d0;
    }
    
    #service_type option {
      padding-left: 20px;
    }
    
    #service_type option.emergency-highlight {
      background-color: #fff5f5;
      color: #d01919 !important;
      font-weight: bold;
    }
    
    .ui.dropdown.disabled {
      opacity: 0.45;
      cursor: not-allowed;
    }
    
    /* Mensagem de informação do serviço */
    #service_info_message {
      margin-top: 1em;
      background-color: #f8ffff !important;
      border: 1px solid #b5d3e7;
    }
  </style>
{% endblock %}

{% block content %}
<div class="ui main basic segment">
  <h2 class="ui blue header">
    <i class="calendar plus outline icon"></i>
    <div class="content">
      Novo Agendamento
      <div class="sub header">Preencha os dados para criar um novo agendamento técnico</div>
    </div>
  </h2>

  {# Mensagens de erro gerais #}
  {% if hasError('general') %}
    <div class="ui error message transition visible">
      <i class="close icon"></i>
      <div class="header">Erro</div>
      <p>{{ getError('general') }}</p>
    </div>
  {% endif %}

  <form class="ui form" id="appointmentForm" method="POST" action="{{ path_for('ERP\\Appointments\\Add') }}" autocomplete="off">
    {{ csrf.field | raw }}
    <input type="hidden" name="_method" value="POST">
    
    {# Campos ocultos para dados selecionados #}
    <input type="hidden" name="customer_id" id="customer_id" value="{{ getValue('customer_id') }}">
    <input type="hidden" name="subsidiary_id" id="subsidiary_id" value="{{ getValue('subsidiary_id') }}">

    {# SEÇÃO 1: Identificação do Cliente #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="user icon"></i>
        Identificação do Cliente
      </h3>
      
      <div class="field required{{ cssError('customer_name') }}">
        <label>Nome do Cliente</label>
        <div class="ui search dropdown-style" id="customer_search">
          <div class="ui icon input">
            <input class="prompt" type="text" name="customer_name" id="customer_name" 
                   placeholder="Digite o nome ou clique para ver clientes..." 
                   value="{{ getValue('customer_name') }}" 
                   autocomplete="off">
            <i class="search icon"></i>
          </div>
          <div class="results"></div>
        </div>
        {% if hasError('customer_name') %}
          <small class="helper">{{ getError('customer_name') }}</small>
        {% endif %}
      </div>
      
      {# Bloco de detalhes do cliente selecionado #}
      <div class="details-block" id="customer_details">
        <h4><i class="info circle icon"></i>Cliente Selecionado</h4>
        <div class="ui relaxed list">
          <div class="item">
            <i class="user icon"></i>
            <div class="content">
              <strong id="customer_name_display">Nome do Cliente</strong>
              <div class="description">
                <span id="customer_document_display">Documento</span>
              </div>
            </div>
          </div>
          <div class="item">
            <i class="building icon"></i>
            <div class="content">
              <strong id="customer_subsidiary_display">Unidade/Filial</strong>
              <div class="description">
                <span id="customer_address_display">Endereço</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    {# SEÇÃO 2: Identificação do Veículo #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="car icon"></i>
        Identificação do Veículo
      </h3>
      
      <div class="field required{{ cssError('plate') }}">
        <label>Placa do Veículo</label>
        <div class="ui search dropdown-style" id="plate_search">
          <div class="ui icon input">
            <input class="prompt" 
                   type="text" 
                   name="plate" 
                   id="plate" 
                   placeholder="Clique para ver todos ou digite para filtrar..." 
                   value="{{ getValue('plate') }}"
                   autocomplete="off">
            <i class="dropdown icon"></i>
          </div>
          <div class="results"></div>
        </div>
        
        <!-- Campo oculto para ID do veículo -->
        <input type="hidden" 
               name="plateid" 
               id="plateid"
               value="{{ getValue('plateid') }}">
        
        {% if hasError('plate') %}
          <small class="helper">{{ getError('plate') }}</small>
        {% endif %}
      </div>
      
      <!-- Container para mensagem/detalhes -->
      <div id="vehicle_info_container"></div>
    </div>

    {# SEÇÃO 3: Tipo de Serviço #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="wrench icon"></i>
        Tipo de Serviço
      </h3>
      
      <div class="field required{{ cssError('service_type') }}">
        <label>Serviço a ser Realizado</label>
        <select name="service_type" id="service_type" class="ui dropdown">
          <option value="">Selecione primeiro um veículo para ver serviços disponíveis</option>
        </select>
        {% if hasError('service_type') %}
          <small class="helper">{{ getError('service_type') }}</small>
        {% endif %}
      </div>
      
      {# Mensagem informativa sobre o serviço selecionado #}
      <div id="service_info_message" class="ui info message" style="display: none;">
        <i class="info circle icon"></i>
        <span id="service_info_text"></span>
      </div>
    </div>

    {# SEÇÃO 4: Data e Hora #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="calendar icon"></i>
        Data e Hora do Atendimento
      </h3>
      
      <div class="two fields">
        <div class="field required{{ cssError('scheduled_date') }}">
          <label>Data do Agendamento</label>
          <div class="ui calendar" id="schedule_calendar">
            <div class="ui input left icon">
              <i class="calendar icon"></i>
              <input type="text" name="scheduled_date" id="scheduled_date" 
                     placeholder="DD/MM/AAAA" 
                     value="{{ getValue('scheduled_date') }}">
            </div>
          </div>
          {% if hasError('scheduled_date') %}
            <small class="helper">{{ getError('scheduled_date') }}</small>
          {% endif %}
        </div>
        
        <div class="field required{{ cssError('scheduled_time') }}">
          <label>Horário</label>
          <select name="scheduled_time" id="scheduled_time" class="ui dropdown">
            <option value="">Selecione o horário</option>
            {% set current_time = getValue('scheduled_time') %}
            {% for hour in 8..18 %}
              {% for minute in ['00', '30'] %}
                {% if not (hour == 12 and minute == '30') %}
                  {% set time_val = '%02d:%s'|format(hour, minute) %}
                  <option value="{{ time_val }}" {% if current_time == time_val %}selected{% endif %}>{{ time_val }}</option>
                {% endif %}
              {% endfor %}
            {% endfor %}
          </select>
          {% if hasError('scheduled_time') %}
            <small class="helper">{{ getError('scheduled_time') }}</small>
          {% endif %}
        </div>
      </div>
      
      {# Campo oculto para datetime combinado #}
      <input type="hidden" name="scheduled_at" id="scheduled_at" value="{{ getValue('scheduled_at') }}">
    </div>

    {# SEÇÃO 5: Técnico Responsável #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="user tie icon"></i>
        Técnico Responsável
      </h3>
      
      <div class="field required{{ cssError('technician_id') }}">
        <label>Técnico</label>
        <div class="ui fluid selection dropdown">
          <input name="technician_id" type="hidden" value="{{ getValue('technician_id') }}">
          <i class="dropdown icon"></i>
          <div class="default text">Escolha um técnico...</div>
          <div class="menu">
            {% set technicianID = getValue('technician_id') %}
            {% for technician in technicians %}
              <div class="item technician-item" 
                   {% if technician.value == technicianID %}selected{% endif %}
                   data-value="{{ technician.value }}">
                <span class="description">
                  <span class="technician-location">{{ technician.city }}/{{ technician.state }}</span>
                  {% if technician.description %}
                    <br>{{ technician.description }}
                  {% endif %}
                </span>
                <span class="text">{{ technician.name }}</span>
              </div>
            {% endfor %}
          </div>
        </div>
        {% if hasError('technician_id') %}
          <small class="helper">{{ getError('technician_id') }}</small>
        {% endif %}
      </div>
    </div>

    {# SEÇÃO 6: Local do Atendimento #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="map marker icon"></i>
        Local do Atendimento
      </h3>
      
      <div class="field required{{ cssError('service_address') }}">
        <label>Endereço</label>
        <div class="ui input">
          <input type="text" name="service_address" id="service_address" 
                 placeholder="Rua, Av..." 
                 value="{{ getValue('service_address') }}">
        </div>
        {% if hasError('service_address') %}
          <small class="helper">{{ getError('service_address') }}</small>
        {% endif %}
      </div>
      
      <div class="three fields">
        <div class="field{{ cssError('service_number') }}">
          <label>Número</label>
          <div class="ui input">
            <input type="text" name="service_number" id="service_number" 
                   placeholder="123" 
                   value="{{ getValue('service_number') }}">
          </div>
          {% if hasError('service_number') %}
            <small class="helper">{{ getError('service_number') }}</small>
          {% endif %}
        </div>
        
        <div class="field{{ cssError('service_district') }}">
          <label>Bairro</label>
          <div class="ui input">
            <input type="text" name="service_district" id="service_district" 
                   placeholder="Centro" 
                   value="{{ getValue('service_district') }}">
          </div>
          {% if hasError('service_district') %}
            <small class="helper">{{ getError('service_district') }}</small>
          {% endif %}
        </div>
        
        <div class="field{{ cssError('service_city') }}">
          <label>Cidade</label>
          <div class="ui input">
            <input type="text" name="service_city" id="service_city" 
                   placeholder="São Paulo" 
                   value="{{ getValue('service_city') }}">
          </div>
          {% if hasError('service_city') %}
            <small class="helper">{{ getError('service_city') }}</small>
          {% endif %}
        </div>
      </div>
    </div>

    {# SEÇÃO 7: Observações #}
    <div class="ui segment section-block">
      <h3 class="ui dividing header">
        <i class="sticky note icon"></i>
        Observações Adicionais
      </h3>
      
      <div class="field{{ cssError('notes') }}">
        <label>Observações</label>
        <textarea name="notes" id="notes" rows="3" 
                  placeholder="Informações adicionais sobre o agendamento...">{{ getValue('notes') }}</textarea>
        {% if hasError('notes') %}
          <small class="helper">{{ getError('notes') }}</small>
        {% endif %}
      </div>
      
      <div class="field">
        <div class="ui checkbox">
          <input type="checkbox" name="is_emergency" id="is_emergency" value="1" {% if getValue('is_emergency') %}checked{% endif %}>
          <label>Agendamento de emergência (prioridade alta)</label>
        </div>
      </div>
    </div>

    {# Botões de ação #}
    <div class="ui hidden divider"></div>
    
    <div class="field">
      <button type="submit" class="ui large green fluid button" id="save_button">
        <i class="save icon"></i> Salvar Agendamento
      </button>
    </div>
    
    <div class="field">
      <a href="{{ path_for('ERP\\Appointments\\Calendar') }}" class="ui large fluid button">
        <i class="cancel icon"></i> Cancelar
      </a>
    </div>
  </form>
</div>
{% endblock %}

{% block scripts %}
  {{ parent() }}
  {{ lib('semantic-ui/components/calendar.min.js') }}
  {{ lib('jquery/plugins/autocomplete/autocomplete.min.js') }}
  
  {% set getCustomerAutocomplete = { 'URL': 'ERP\\Cadastre\\Entities\\Autocompletion\\Get', 'method': 'PATCH' } %}
  {% set getVehicleCompletion      = { 'URL': 'ERP\\Cadastre\\Vehicles\\Autocompletion\\Get', 'method': 'PATCH' } %}
  
  <script>
// ========================================
// MELHORIAS UX - AUTOCOMPLETES v2.0
// ========================================

$(document).ready(function() {
    // Inicializar componentes Semantic UI
    $('.ui.dropdown').dropdown();
    $('.ui.checkbox').checkbox();
    
    // Inicializar campo de tipo de serviço como desabilitado
    $('#service_type').parent().addClass('disabled');
    $('#service_type').dropdown('set text', 'Selecione primeiro um veículo');
    
    // ========================================
    // VARIÁVEIS GLOBAIS DE CONTROLE
    // ========================================
    
    var customerSelected = false;
    var currentCustomerId = $('#customer_id').val();
    var allVehicles = []; // Cache de todos os veículos do cliente
    var isSearching = false; // Flag para controlar busca em andamento
    
    // Se já tem cliente selecionado (edit mode)
    if (currentCustomerId && currentCustomerId !== '') {
        customerSelected = true;
        enablePlateField();
    } else {
        disablePlateField();
    }
    
    // ========================================
    // FUNÇÕES AUXILIARES
    // ========================================
    
    // Função para desabilitar campo de placa
    function disablePlateField() {
        $('#plate').prop('disabled', true)
                   .attr('placeholder', 'Selecione um cliente primeiro...')
                   .css('background-color', '#f0f0f0');
        
        // Adicionar mensagem informativa
        if (!$('#plate_info_message').length) {
            $('#plate').parent().after(
                '<div id="plate_info_message" class="ui info message">' +
                '<i class="info circle icon"></i>' +
                'Selecione um cliente para habilitar a busca de veículos' +
                '</div>'
            );
        }
    }
    
    // Função para habilitar campo de placa
    function enablePlateField() {
        $('#plate').prop('disabled', false)
                   .attr('placeholder', 'Clique para ver todos ou digite para filtrar...')
                   .css('background-color', '');
        
        // Remover mensagem informativa
        $('#plate_info_message').remove();
        
        // Inicializar autocomplete de placa
        initializePlateAutocomplete();
    }
    
    // Função para formatar veículo para exibição
    function formatVehicleResult(vehicle) {
        var statusLabel = vehicle.inuse 
            ? '<span style="color: darkred; font-style: italic;"> (rastreado)</span>'
            : '<span style="color: #9cadcd; font-style: italic;"> (sem rastreador)</span>';
        
        var blockedLabel = vehicle.blocked 
            ? ' - <span style="color: #8b0000; font-style: italic;">Bloqueado</span>'
            : '';
        
        var description = 
            '<div style="color: #0256C4; font-style: italic;">' + 
            vehicle.brand + ' / ' + vehicle.model + '</div>' +
            '<div>Cor: <span style="color: CornflowerBlue;">' + 
            vehicle.color + '</span>' + blockedLabel + '</div>';
        
        return {
            title: vehicle.plate + statusLabel,
            description: description,
            vehicle_data: vehicle
        };
    }
    
    // ========================================
    // CONFIGURAÇÃO DO AUTOCOMPLETE DE CLIENTE (MELHORADO)
    // ========================================
    
    $('#customer_search').search({
        apiSettings: {
            url: '{{ path_for(getCustomerAutocomplete.URL) }}',
            method: '{{ getCustomerAutocomplete.method }}',
            beforeSend: function(settings) {
                // MELHORIA: Busca sempre com o termo atual (não só 1 letra)
                settings.data = {
                    searchTerm: settings.urlData.query,
                    type: 'customer',
                    detailed: true,
                    notIncludeAnyRegister: true,
                    limit: 20 // Aumentar limite
                };
                return settings;
            },
            onResponse: function(response) {
                var results = { results: [] };
                
                if (response && response.result === 'OK' && response.data) {
                    $.each(response.data, function(index, customer) {
                        var description = '';
                        if (customer.juridicalperson) {
                            description = customer.subsidiaryname + ' | ' + customer.type;
                        } else {
                            description = (customer.headoffice ? 'Titular' : 'Dependente: ' + customer.subsidiaryname);
                        }
                        
                        results.results.push({
                            title: customer.name,
                            description: description,
                            customer_data: customer
                        });
                    });
                } else {
                    results.message = {
                        type: 'empty',
                        header: 'Nenhum cliente encontrado',
                        description: 'Tente com outro nome ou verifique a digitação'
                    };
                }
                
                return results;
            }
        },
        // MELHORIAS UX - CONFIGURAÇÕES
        minCharacters: 0, // MELHORIA: Permitir busca desde o primeiro caractere
        searchOnFocus: false, // Não buscar ao focar (comportamento padrão)
        cache: false, // Sem cache para sempre ter dados atualizados
        maxResults: 20,
        searchDelay: 200, // Delay menor para resposta mais rápida
        showNoResults: true, // Sempre mostrar mensagem quando não encontrar
        preserveHTML: true, // Preservar HTML nas respostas
        selectFirstResult: false, // Não selecionar automaticamente
        onSelect: function(result, response) {
            if (result && result.customer_data) {
                var customer = result.customer_data;
                
                // Preencher campos ocultos
                $('#customer_id').val(customer.id);
                $('#subsidiary_id').val(customer.subsidiaryid);
                
                // Manter o nome no campo
                $('#customer_name').val(customer.name);
                
                // Habilitar campo de placa
                customerSelected = true;
                currentCustomerId = customer.id;
                enablePlateField();
                
                // Limpar seleção anterior de veículo
                $('#plate').val('');
                $('#plateid').val('');
                hideVehicleDetails();
                allVehicles = []; // Limpar cache de veículos
                
                // Desabilitar e resetar tipos de serviço
                $('#service_type').parent().addClass('disabled');
                resetServiceTypes();
                
                // Exibir detalhes do cliente
                $('#customer_name_display').text(customer.name);
                $('#customer_subsidiary_display').text(customer.subsidiaryname);
                
                // Buscar dados completos do cliente
                $.ajax({
                    url: '{{ path_for(getCustomerAutocomplete.URL) }}',
                    method: '{{ getCustomerAutocomplete.method }}',
                    data: {
                        type: 'ownerdata',
                        customerID: customer.id,
                        subsidiaryID: customer.subsidiaryid
                    },
                    success: function(response) {
                        if (response.result === 'OK' && response.data) {
                            var ownerData = response.data;
                            
                            $('#customer_document_display').text(ownerData.nationalregister || 'Não informado');
                            
                            var address = ownerData.address || '';
                            if (ownerData.streetnumber) address += ', ' + ownerData.streetnumber;
                            if (ownerData.complement) address += ' - ' + ownerData.complement;
                            if (ownerData.district) address += ' - ' + ownerData.district;
                            if (ownerData.cityname) address += ', ' + ownerData.cityname;
                            if (ownerData.state) address += '/' + ownerData.state;
                            
                            $('#customer_address_display').text(address || 'Endereço não informado');
                            
                            // Auto-preencher endereço de atendimento (se vazio)
                            if (!$('#service_address').val() && ownerData.address) {
                                $('#service_address').val(ownerData.address);
                                $('#service_number').val(ownerData.streetnumber || '');
                                $('#service_district').val(ownerData.district || '');
                                $('#service_city').val(ownerData.cityname || '');
                            }
                        }
                    }
                });
                
                $('#customer_details').addClass('active');
            }
            return false;
        }
    });
    
    // ========================================
    // CONFIGURAÇÃO DO AUTOCOMPLETE DE PLACA (MELHORADO)
    // ========================================
    
    function initializePlateAutocomplete() {
        var plateSearch = $('#plate_search');
        var plateInput = $('#plate');
        
        // Configurar search do Semantic UI
        plateSearch.search({
            apiSettings: {
                url: "{{ path_for(getVehicleCompletion.URL) }}",
                method: "{{ getVehicleCompletion.method }}",
                beforeSend: function(settings) {
                    var customerId = $('#customer_id').val();
                    var searchTerm = settings.urlData.query || '';
                    
                    // Se não tem termo de busca (clicou no campo), buscar todos
                    if (!searchTerm || searchTerm.trim() === '') {
                        searchTerm = ' '; // Espaço para buscar todos
                    }
                    
                    settings.data = {
                        searchTerm: searchTerm,
                        customerID: customerId,
                        subsidiaryID: $('#subsidiary_id').val(),
                        type: 'vehicle',
                        detailed: true,
                        limit: 50 // Aumentar limite para mostrar todos
                    };
                    
                    console.log('Buscando veículos:', searchTerm);
                    isSearching = true;
                    return settings;
                },
                onResponse: function(response) {
                    isSearching = false;
                    var results = { results: [] };
                    
                    if (response && response.result === 'OK') {
                        if (response.data && response.data.length > 0) {
                            // Cachear todos os veículos
                            allVehicles = response.data;
                            
                            $.each(response.data, function(index, vehicle) {
                                results.results.push(formatVehicleResult(vehicle));
                            });
                        } else {
                            results.message = {
                                type: 'empty',
                                header: 'Nenhum veículo encontrado',
                                description: 'Este cliente não possui veículos cadastrados'
                            };
                        }
                    }
                    
                    return results;
                },
                onComplete: function() {
                    isSearching = false;
                }
            },
            // MELHORIAS UX - CONFIGURAÇÕES
            minCharacters: 0, // MELHORIA: Permitir busca desde o início
            searchOnFocus: true, // MELHORIA: Buscar ao focar (comportamento dropdown)
            cache: false,
            maxResults: 50,
            searchDelay: 100, // Delay menor para resposta mais rápida
            showNoResults: true,
            preserveHTML: true,
            selectFirstResult: false,
            // Configurar busca local (filtragem em tempo real)
            searchFields: ['title', 'description'],
            fullTextSearch: true, // MELHORIA: Busca em texto completo
            onSelect: function(result, response) {
                if (result && result.vehicle_data) {
                    var vehicle = result.vehicle_data;
                    
                    console.log('✅ Veículo selecionado:', vehicle);
                    
                    // Preencher campos
                    $('#plate').val(vehicle.plate);
                    $('#plateid').val(vehicle.id);
                    
                    // Mostrar detalhes
                    showVehicleDetails(vehicle);
                    
                    // Habilitar dropdown de serviços
                    $('#service_type').parent().removeClass('disabled');
                    
                    // Fechar o dropdown
                    plateSearch.search('hide results');
                }
                return false;
            }
        });
        
        // MELHORIA: Adicionar comportamento de clique para mostrar todos
        plateInput.on('focus', function() {
            if (!isSearching && customerSelected) {
                var currentVal = $(this).val();
                
                // Se o campo está vazio ou queremos mostrar todos
                if (!currentVal || currentVal.trim() === '') {
                    // Forçar busca de todos os veículos
                    plateSearch.search('query');
                    
                    // Se já temos veículos em cache, mostrar
                    if (allVehicles.length > 0) {
                        var results = { results: [] };
                        $.each(allVehicles, function(index, vehicle) {
                            results.results.push(formatVehicleResult(vehicle));
                        });
                        plateSearch.search('add results', results.results);
                        plateSearch.search('show results');
                    }
                }
            }
        });
        
        // MELHORIA: Adicionar animação ao ícone
        plateInput.on('focus', function() {
            plateSearch.addClass('active');
        }).on('blur', function() {
            setTimeout(function() {
                plateSearch.removeClass('active');
            }, 200);
        });
        
        // Monitorar limpeza manual
        plateInput.on('input', function() {
            var value = $(this).val();
            
            if (!value || value.trim() === '') {
                $('#plateid').val('');
                hideVehicleDetails();
                
                // Desabilitar dropdown de serviços
                $('#service_type').parent().addClass('disabled');
                resetServiceTypes();
                
                // Se limpar o campo, mostrar todos novamente ao próximo clique
                allVehicles = [];
            }
        });
        
        // MELHORIA: Permitir navegação com teclado
        plateInput.on('keydown', function(e) {
            if (e.key === 'ArrowDown' && !plateSearch.search('is visible')) {
                plateSearch.search('show results');
            }
        });
    }
    
    // Função para mostrar detalhes do veículo
    function showVehicleDetails(vehicle) {
        console.log('Mostrando detalhes do veículo:', vehicle);
        
        var statusText = vehicle.inuse ? 'Com rastreador' : 'Sem rastreador';
        var statusClass = vehicle.inuse ? 'green' : 'grey';
        var blockedText = vehicle.blocked ? '<span class="ui red label">Bloqueado</span>' : '';
        
        var detailsHtml = 
            '<div class="details-block active" id="vehicle_details">' +
            '  <h4><i class="car icon"></i>Veículo Selecionado</h4>' +
            '  <div class="ui relaxed list">' +
            '    <div class="item">' +
            '      <i class="car icon"></i>' +
            '      <div class="content">' +
            '        <strong>' + vehicle.plate + '</strong> ' +
            '        <span class="ui ' + statusClass + ' label">' + statusText + '</span> ' + 
            blockedText +
            '        <div class="description">' +
            '          <strong>Modelo:</strong> ' + vehicle.brand + ' ' + vehicle.model + '<br>' +
            '          <strong>Cor:</strong> ' + vehicle.color + '<br>' +
            '          <strong>Tipo:</strong> ' + vehicle.type +
            '        </div>' +
            '      </div>' +
            '    </div>' +
            '  </div>';
        
        // Se tem rastreador E temos os dados dos equipamentos
        if (vehicle.equipments && vehicle.equipments.length > 0) {
            detailsHtml += 
                '  <div class="ui divider"></div>' +
                '  <h4><i class="wifi icon"></i>Rastreador(es) Instalado(s)</h4>' +
                '  <div class="ui relaxed list">';
            
            vehicle.equipments.forEach(function(equipment) {
                var mainLabel = equipment.main ? 
                    '<span class="ui tiny blue label">Principal</span>' : 
                    '<span class="ui tiny grey label">Contingência</span>';
                
                var installedDate = 'Não informado';
                if (equipment.installedat) {
                    try {
                        var date = new Date(equipment.installedat);
                        installedDate = date.toLocaleDateString('pt-BR');
                    } catch(e) {
                        installedDate = equipment.installedat;
                    }
                }
                
                detailsHtml += 
                    '    <div class="item">' +
                    '      <i class="microchip icon"></i>' +
                    '      <div class="content">' +
                    '        <div class="header">' +
                    '          ' + (equipment.equipmentbrandname || 'Marca não informada') + ' ' + 
                                (equipment.equipmentmodelname || 'Modelo não informado') + ' ' + mainLabel +
                    '        </div>' +
                    '        <div class="description">';
                
                detailsHtml += '          <strong>Nº Série:</strong> ' + 
                              (equipment.serialnumber || 'Não informado') + '<br>';
                
                if (equipment.installationsite) {
                    detailsHtml += '          <strong>Local de Instalação:</strong> ' + 
                                  equipment.installationsite + '<br>';
                }
                
                var features = [];
                if (equipment.hasblocking === true || equipment.hasblocking === 't') {
                    var blockLocation = equipment.blockingsite ? ' (' + equipment.blockingsite + ')' : '';
                    features.push('<i class="lock icon"></i>Bloqueio' + blockLocation);
                }
                if (equipment.hasibutton === true || equipment.hasibutton === 't') {
                    var ibuttonLocation = equipment.ibuttonsite ? ' (' + equipment.ibuttonsite + ')' : '';
                    features.push('<i class="key icon"></i>iButton' + ibuttonLocation);
                }
                if (equipment.hassiren === true || equipment.hassiren === 't') {
                    var sirenLocation = equipment.sirensite ? ' (' + equipment.sirensite + ')' : '';
                    features.push('<i class="volume up icon"></i>Sirene' + sirenLocation);
                }
                if (equipment.panicbuttonsite) {
                    features.push('<i class="exclamation triangle icon"></i>Botão Pânico (' + 
                                 equipment.panicbuttonsite + ')');
                }
                
                if (features.length > 0) {
                    detailsHtml += '          <div class="ui small labels" style="margin-top: 5px;">';
                    features.forEach(function(feature) {
                        detailsHtml += '<div class="ui label">' + feature + '</div>';
                    });
                    detailsHtml += '          </div>';
                }
                
                detailsHtml += 
                    '          <div style="margin-top: 5px;">' +
                    '            <i class="calendar check icon"></i>' +
                    '            <strong>Instalado em:</strong> ' + installedDate +
                    '          </div>' +
                    '        </div>' +
                    '      </div>' +
                    '    </div>';
            });
            
            detailsHtml += '  </div>';
            
        } else if (vehicle.inuse) {
            detailsHtml += 
                '  <div class="ui divider"></div>' +
                '  <div class="ui info message">' +
                '    <i class="info circle icon"></i>' +
                '    Este veículo possui rastreador instalado' +
                '  </div>';
        } else {
            detailsHtml += 
                '  <div class="ui divider"></div>' +
                '  <div class="ui warning message">' +
                '    <i class="warning sign icon"></i>' +
                '    Este veículo não possui rastreador instalado' +
                '  </div>';
        }
        
        detailsHtml += '</div>';
        
        $('#vehicle_details').remove();
        $('#vehicle_info_container').html(detailsHtml);
        
        // IMPORTANTE: Atualizar tipos de serviço baseado no veículo
        updateServiceTypes(vehicle);
    }
    
    // Função para esconder detalhes do veículo
    function hideVehicleDetails() {
        console.log('Escondendo detalhes do veículo');
        $('#vehicle_details').remove();
        $('#vehicle_info_container').empty();
        
        // Resetar tipos de serviço
        resetServiceTypes();
    }
    
    // ========================================
    // LÓGICA DE NEGÓCIO PARA TIPOS DE SERVIÇO
    // ========================================
    
    // Função para analisar o estado do veículo
    function analyzeVehicleState(vehicle) {
        var state = {
            hasMainTracker: false,
            hasBackupTracker: false,
            hasVideoTelemetry: false,
            hasAccessories: false,
            isBlocked: vehicle.blocked === true || vehicle.blocked === 't'
        };
        
        // Analisar equipamentos instalados
        if (vehicle.equipments && vehicle.equipments.length > 0) {
            vehicle.equipments.forEach(function(equipment) {
                // Rastreador principal
                if (equipment.main === true || equipment.main === 't') {
                    state.hasMainTracker = true;
                }
                // Rastreador contingência
                else if (equipment.main === false || equipment.main === 'f') {
                    state.hasBackupTracker = true;
                }
                
                // VideoTelemetria (verificar por tipo ou modelo)
                if (equipment.type === 'videotelemetry' || 
                    (equipment.equipmentmodelname && equipment.equipmentmodelname.toLowerCase().includes('video'))) {
                    state.hasVideoTelemetry = true;
                }
                
                // Acessórios
                if (equipment.hasblocking || equipment.hasibutton || equipment.hassiren || equipment.panicbuttonsite) {
                    state.hasAccessories = true;
                }
            });
        } else if (vehicle.inuse) {
            // Se marca como tendo rastreador mas não temos detalhes
            state.hasMainTracker = true;
        }
        
        console.log('Estado do veículo analisado:', state);
        return state;
    }
    
    // Função para obter serviços disponíveis baseado no estado
    function getAvailableServices(vehicleState) {
        var services = [];
        
        // REGRAS PARA RASTREADOR PRINCIPAL
        if (!vehicleState.hasMainTracker) {
            services.push({
                value: 'install_main_tracker',
                text: 'Instalação de Rastreador Principal',
                category: 'tracker',
                priority: 1,
                info: 'Instalação de primeiro rastreador no veículo'
            });
        } else {
            services.push(
                {
                    value: 'maintenance_main_tracker',
                    text: 'Manutenção de Rastreador Principal',
                    category: 'tracker',
                    priority: 2,
                    info: 'Verificação e reparo do rastreador principal'
                },
                {
                    value: 'remove_main_tracker',
                    text: 'Retirada de Rastreador Principal',
                    category: 'tracker',
                    priority: 5,
                    info: 'Remoção completa do rastreador principal'
                }
            );
        }
        
        // REGRAS PARA RASTREADOR CONTINGÊNCIA
        if (vehicleState.hasMainTracker && !vehicleState.hasBackupTracker) {
            services.push({
                value: 'install_backup_tracker',
                text: 'Instalação de Rastreador Contingência',
                category: 'tracker',
                priority: 3,
                info: 'Instalação de rastreador de backup para redundância'
            });
        } else if (vehicleState.hasBackupTracker) {
            services.push(
                {
                    value: 'maintenance_backup_tracker',
                    text: 'Manutenção de Rastreador Contingência',
                    category: 'tracker',
                    priority: 4,
                    info: 'Verificação e reparo do rastreador de contingência'
                },
                {
                    value: 'remove_backup_tracker',
                    text: 'Retirada de Rastreador Contingência',
                    category: 'tracker',
                    priority: 6,
                    info: 'Remoção do rastreador de contingência'
                }
            );
        }
        
        // REGRAS PARA VIDEOTELEMETRIA
        if (vehicleState.hasMainTracker) {
            if (!vehicleState.hasVideoTelemetry) {
                services.push({
                    value: 'install_videotelemetry',
                    text: 'Instalação de VideoTelemetria',
                    category: 'video',
                    priority: 7,
                    info: 'Instalação de sistema de câmeras e telemetria'
                });
            } else {
                services.push(
                    {
                        value: 'maintenance_videotelemetry',
                        text: 'Manutenção de VideoTelemetria',
                        category: 'video',
                        priority: 8,
                        info: 'Verificação e ajuste do sistema de vídeo'
                    },
                    {
                        value: 'remove_videotelemetry',
                        text: 'Retirada de VideoTelemetria',
                        category: 'video',
                        priority: 9,
                        info: 'Remoção do sistema de videotelemetria'
                    }
                );
            }
        }
        
        // REGRAS PARA ACESSÓRIOS
        if (vehicleState.hasMainTracker || vehicleState.hasBackupTracker) {
            services.push({
                value: 'install_accessory',
                text: 'Instalação de Acessório',
                category: 'accessory',
                priority: 10,
                info: 'Instalação de bloqueador, sirene, botão de pânico, etc.'
            });
            
            if (vehicleState.hasAccessories) {
                services.push({
                    value: 'maintenance_accessory',
                    text: 'Manutenção de Acessório',
                    category: 'accessory',
                    priority: 11,
                    info: 'Reparo ou ajuste de acessórios instalados'
                });
            }
        }
        
        // SERVIÇOS SEMPRE DISPONÍVEIS
        // Emergência com destaque se veículo está bloqueado
        if (vehicleState.isBlocked) {
            services.push({
                value: 'emergency',
                text: 'EMERGÊNCIA - Veículo Bloqueado',
                category: 'general',
                priority: 0, // Máxima prioridade
                info: 'Desbloqueio de emergência - veículo atualmente bloqueado',
                highlight: true
            });
        } else {
            services.push({
                value: 'emergency',
                text: 'Emergência',
                category: 'general',
                priority: 12,
                info: 'Atendimento de emergência (desbloqueio, pane, etc.)'
            });
        }
        
        services.push({
            value: 'inspection',
            text: 'Vistoria',
            category: 'general',
            priority: 13,
            info: 'Vistoria geral do veículo e equipamentos'
        });
        
        // Ordenar por prioridade
        return services.sort(function(a, b) {
            return a.priority - b.priority;
        });
    }
    
    // Função para atualizar dropdown de tipos de serviço
    function updateServiceTypes(vehicle) {
        console.log('Atualizando tipos de serviço para o veículo:', vehicle.plate);
        
        // Analisar estado do veículo
        var vehicleState = analyzeVehicleState(vehicle);
        
        // Obter serviços disponíveis
        var availableServices = getAvailableServices(vehicleState);
        
        // Limpar dropdown atual
        var $serviceDropdown = $('#service_type');
        $serviceDropdown.empty();
        
        // Adicionar opção padrão
        $serviceDropdown.append('<option value="">Selecione o tipo de serviço</option>');
        
        // Agrupar serviços por categoria
        var categories = {
            'tracker': 'Rastreador',
            'video': 'VideoTelemetria',
            'accessory': 'Acessórios',
            'general': 'Serviços Gerais'
        };
        
        // Organizar serviços por categoria
        var servicesByCategory = {};
        availableServices.forEach(function(service) {
            if (!servicesByCategory[service.category]) {
                servicesByCategory[service.category] = [];
            }
            servicesByCategory[service.category].push(service);
        });
        
        // Adicionar serviços ao dropdown
        Object.keys(servicesByCategory).forEach(function(category) {
            // Adicionar grupo de opções
            var $optgroup = $('<optgroup label="' + categories[category] + '">');
            
            servicesByCategory[category].forEach(function(service) {
                var $option = $('<option value="' + service.value + '">' + service.text + '</option>');
                
                // Adicionar atributos de dados
                $option.attr('data-info', service.info);
                $option.attr('data-category', service.category);
                
                // Destacar emergência se necessário
                if (service.highlight) {
                    $option.addClass('emergency-highlight');
                    $option.css('color', '#d01919');
                    $option.css('font-weight', 'bold');
                }
                
                $optgroup.append($option);
            });
            
            $serviceDropdown.append($optgroup);
        });
        
        // Reinicializar dropdown do Semantic UI
        $serviceDropdown.dropdown('refresh');
        
        // Adicionar listener para mostrar info do serviço
        $serviceDropdown.on('change', function() {
            var selectedOption = $(this).find('option:selected');
            var info = selectedOption.attr('data-info');
            
            if (info) {
                $('#service_info_text').text(info);
                $('#service_info_message').show();
            } else {
                $('#service_info_message').hide();
            }
        });
        
        console.log('Tipos de serviço atualizados:', availableServices.length + ' opções disponíveis');
    }
    
    // Função para resetar tipos de serviço
    function resetServiceTypes() {
        console.log('Resetando tipos de serviço');
        
        var $serviceDropdown = $('#service_type');
        $serviceDropdown.empty();
        $serviceDropdown.append('<option value="">Selecione primeiro um veículo para ver serviços disponíveis</option>');
        $serviceDropdown.dropdown('refresh');
        
        $('#service_info_message').hide();
    }
    
    // ========================================
    // MONITORAMENTO DO CAMPO CLIENTE
    // ========================================
    
    $('#customer_name').on('input', function() {
        var value = $(this).val();
        
        // Se o campo foi limpo manualmente
        if (!value || value.trim() === '') {
            // Resetar seleção de cliente
            $('#customer_id').val('');
            $('#subsidiary_id').val('');
            $('#customer_details').removeClass('active');
            
            // Desabilitar campo de placa
            customerSelected = false;
            currentCustomerId = '';
            disablePlateField();
            
            // Limpar veículo
            $('#plate').val('');
            $('#plateid').val('');
            hideVehicleDetails();
            allVehicles = [];
            
            // Desabilitar e resetar tipos de serviço
            $('#service_type').parent().addClass('disabled');
            resetServiceTypes();
        }
    });
    
    // ========================================
    // CONFIGURAÇÃO DO CALENDÁRIO
    // ========================================
    
    $('#schedule_calendar').calendar({
        type: 'date',
        monthFirst: false,
        today: true,
        minDate: new Date(),
        formatter: { 
            date: function (date, settings) { 
                if (!date) return ''; 
                var day = date.getDate(); 
                var month = date.getMonth() + 1; 
                var year = date.getFullYear(); 
                return (day < 10 ? '0' : '') + day + '/' + 
                       (month < 10 ? '0' : '') + month + '/' + year; 
            }
        }
    });
    
    // ========================================
    // VALIDAÇÃO DO FORMULÁRIO
    // ========================================
    
    $('#appointmentForm').on('submit', function(e) {
        var date = $('#scheduled_date').val();
        var time = $('#scheduled_time').val();
        
        // Validar se cliente foi selecionado
        if (!$('#customer_id').val()) {
            e.preventDefault();
            alert('Por favor, selecione um cliente válido.');
            $('#customer_name').focus();
            return false;
        }
        
        // Validar se veículo foi selecionado
        if (!$('#plateid').val() && $('#plate').val()) {
            e.preventDefault();
            alert('Por favor, selecione um veículo válido da lista.');
            $('#plate').focus();
            return false;
        }
        
        // Combinar data e hora
        if (date && time) {
            var dateParts = date.split('/');
            if (dateParts.length === 3) {
                var datetime = dateParts[2] + '-' + dateParts[1] + '-' + 
                              dateParts[0] + ' ' + time + ':00';
                $('#scheduled_at').val(datetime);
            }
        }
        
        // Adicionar loading ao botão
        $('#save_button').addClass('loading').prop('disabled', true);
    });
    
    // ========================================
    // EVENTOS AUXILIARES
    // ========================================
    
    // Fechar mensagens
    $('.ui.message .close.icon').on('click', function() {
        $(this).closest('.message').transition('fade');
    });
    
    console.log('✨ Sistema de autocomplete v2.0 inicializado com melhorias UX!');
});
  </script>
{% endblock %}