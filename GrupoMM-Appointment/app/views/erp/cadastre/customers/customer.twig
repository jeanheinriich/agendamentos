{% extends 'templates/erp/layout.twig' %}
{% block title %}{{ parent() }} - {% if formMethod == 'POST' %}Adicionar{% else %}Editar{% endif %} cliente{% endblock %}
{% block stylesheets %}
  {{ parent() }}

  {{ css('libs/jquery/plugins/autocomplete/autocomplete.min.css') }}
  {{ css('form.min.css') }}
  {{ css('dialog.min.css') }}
  <style>
    .ui.vertical.segment.mini.form {
      border-bottom: none;
      padding-bottom: 0;
      margin-bottom: 0;
    }

    .ui.bottom.attached.vertical.segment {
      border: none;
      border-radius: 0;
      margin-bottom: 0;
    }
    .ui.grid.phoning .ui.selection.dropdown {
      min-width: 8em;
    }
    .ui.grid.phoning,
    .ui.grid.mailing:not(.address) {
      margin-top: 0;
    }
    .ui.input.readonly > textarea {
      background-color: GhostWhite;
      border: 1px solid rgba(34,36,38,0.15);
      color: DarkSlateGray;
    }
    label > i {
      color: #5C738B;
    }
    div.subsidiary.entry {
      display: inline-grid;
      border-top: 1px solid rgba(34,36,38,.15) !important;
    }
    div.subsidiary.entry .wide.column .header {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }
    .italic {
      font-style: italic;
    }
    .ui.list .list > .item .description,
    .ui.list > .item .description {
      margin-top: .2em;
      line-height: 1.5em !important;
    }
    .bold {
      font-weight: bold;
    }
  </style>
{% endblock stylesheets %}
{% block content %}
  {% if formMethod == 'POST' %}
    {% set URL = 'ERP\\Cadastre\\Customers\\Add' %}
  {% else %}
    {% set URL = 'ERP\\Cadastre\\Customers\\Edit' %}
  {% endif %}
  {% set toggleBlocked = { 'URL': 'ERP\\Cadastre\\Customers\\ToggleBlocked', 'method': 'PUT' } %}
  {% set previous = 'ERP\\Cadastre\\Customers' %}
  {% if authorization.getAuthorizationFor(URL, formMethod) %}
    {% set editMode = true %}
    {% set readonly = '' %}
  {% else %}
    {% set editMode = false %}
    {% set readonly = ' readonly' %}
  {% endif %}
  {% set enableToggleBlocked = authorization.getAuthorizationFor(toggleBlocked.URL, toggleBlocked.method) %}
  {% set juridicalperson = getValue('juridicalperson')|toBoolean %}
  <div class="ui main basic segment">
    <!-- Início cabeçalho módulo -->
    <h2 class="ui blue header">
      <table cellspacing="0" cellpadding="0">
        <tbody>
          <tr>
            <td class="mobile hidden">
              {% if authorization.user.groupid < 6 %}
              {{ icon('erp/customers.svg', 'Cliente') }}
              {% else %}
              {{ icon('erp/customer.svg', 'Cliente') }}
              {% endif %}
            </td>
            <td>
              <div class="content">
              {% if authorization.user.groupid < 6 %}
                {% if editMode %}
                  {% if formMethod == 'POST' %}
                    Adicionar
                  {% else %}
                    Editar
                  {% endif %}
                  cliente
                  <div class="sub header">
                    Permite
                    {% if formMethod == 'POST' %}
                      adicionar um novo
                    {% else %}
                      modificar as informações cadastrais de um
                    {% endif %}
                    cliente.
                  </div>
                {% else %}
                  Visualizar cliente
                  <div class="sub header">
                    Permite visualizar as informações cadastrais de um
                    cliente.
                  </div>
                {% endif %}
              {% else %}
                Meus dados cadastrais
                <div class="sub header">
                  Permite
                  {% if editMode %}
                    modificar
                  {% else %}
                    visualizar
                  {% endif %}
                  as minhas informações cadastrais.
                </div>
              {% endif %}
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </h2>
    <!-- Fim cabeçalho módulo -->
    
    <!-- Início conteúdo do módulo -->
    <div class="ui vertical module segment">
      <!-- Início formulário -->
      <form class="ui form" method="POST" autocomplete="off"
            action="{{ path_for(URL, {'customerID': getValue('entityid') }) }}">
        <h3 class="ui header">Dados básicos do cliente</h3>
        <div class="fields">
          <div class="eight wide field{{ cssError('name') }}">
            <label>
              {% if juridicalperson %}
                Razão Social
              {% else %}
                Titular
              {% endif %}
            </label>
            <div class="ui input{{ readonly }}">
              <input name="name" type="text" maxlength="100"
                     placeholder="Informe o nome do cliente..."
                     {{ readonly }}
                     value="{{ getValue('name') }}">
              <input name="entitytypeid" type="hidden"
                     value="{{ getValue('entitytypeid') }}">
              <input name="juridicalperson" type="hidden"
                     value="{% if getValue('juridicalperson')|toBoolean %}true{% else %}false{% endif %}">
            </div>
            {% if hasError('name') %}
            <small class="helper">{{ getError('name') }}</small>
            {% endif %}
          </div>
          <div class="eight wide field{{ cssError('tradingname') }}">
            <label>
              {% if juridicalperson %}
              Nome fantasia <i>(opcional)</i>
              <span data-tooltip="Também chamado de nome comercial, nome de marca ou nome de fachada"
                    data-content="Top Left" data-position="top left"
                    data-inverted="">
                <i class="question circle olive outline icon"></i>
              </span>
              {% else %}
                Apelido <i>(opcional)</i>
              {% endif %}
            </label>
            <div class="ui input{{ readonly }}">
              <input name="tradingname" type="text" maxlength="100"
                     {% if juridicalperson %}
                     placeholder="Informe o nome fantasia..."
                     {% else %}
                     placeholder="Informe o apelido..."
                     {% endif %}
                     {{ readonly }}
                     value="{{ getValue('tradingname') }}">
            </div>
            {% if hasError('tradingname') %}
            <small class="helper">{{ getError('tradingname') }}</small>
            {% endif %}
          </div>
        </div>

        <h4>Relacionamentos existentes</h4>
        {% set relationships = getValue('relationships') %}
        <div class="ui list">
        {% if (relationships[1]|length == 0) and (relationships[3]|length == 0) %}
          <div class="item">
            <i class="info blue big icon"></i>
            <div class="content">
              <a class="header" style="color: #4c516d !important; font-style: italic;">
                Nenhum relacionamento ainda
              </a>
              <div class="description"style="color: #72a0c1; font-style: italic;">
                Adicione um contrato ou vincule um equipamento à um dos
                veículos deste cliente em uma associação.
              </div>
            </div>
          </div>
        {% endif %}
        {% if relationships[1]|length > 0 %}
          {% for contract in relationships[1] %}
          <div class="item">
            {% if contract.active %}
            <i class="check green big icon"></i>
            {% else %}
            <i class="close grey big icon"></i>
            {% endif %}
            <div class="content">
              <a class="header" {% if contract.active %}style="color: #1560bd !important;"{% else %}style="color: #4c516d !important; font-style: italic;"{% endif %}>
                {% if contract.active %}
                  Cliente
                {% else %}
                  Foi cliente
                {% endif %}
                direto através do contrato nº {{ contract.number }}
              </a>
              <div class="description" {% if not contract.active %}style="color: #72a0c1; font-style: italic;"{% endif %}>
                {% if contract.signaturedate %}
                  Assinado em &nbsp;<b>{{ contract.signaturedate }}</b>&nbsp;
                  {% if contract.enddate %}
                  e encerrado em &nbsp;<b>{{ contract.enddate }}</b>
                  {% endif %}
                  ;<br>
                {% endif %}
                {% if authorization.user.groupid < 3 %}
                Cobrando &nbsp;<b>R$ {{ contract.monthprice }}/mês</b>&nbsp; por veículo rastreado;
                {% endif %}
              </div>
            </div>
          </div>
          {% endfor %}
        {% endif %}
        {% if relationships[2]|length > 0 %}
          <div class="item">
            <i class="exclamation circle orange big icon"></i>
            <div class="content">
              <a class="header">
                O cliente é uma associação
              </a>
              <div class="description">
                Conta com com&nbsp;&nbsp;
                <span class="ui teal bold italic text">
                  {{ relationships[2].numberOfAssociates }}
                </span>&nbsp;&nbsp;
                associados atualmente
              </div>
            </div>
          </div>
        {% endif %}
        {% if relationships[3]|length > 0 %}
          {% for affiliation in relationships[3] %}
          <div class="item">
            {% if affiliation.active %}
            <i class="check green big icon"></i>
            {% else %}
            <i class="close grey big icon"></i>
            {% endif %}
            <div class="content">
              <a class="header" {% if not affiliation.active %}style="color: #4c516d !important; font-style: italic;"{% endif %}>
                {% if affiliation.active %}
                  Cliente
                {% else %}
                  Foi cliente
                {% endif %}
                associado à &nbsp;{{ affiliation.name }}
              </a>
              <div class="description" {% if not affiliation.active %}style="color: #72a0c1; font-style: italic;"{% endif %}>
                Com início em &nbsp;<b>{{ affiliation.joinedat }}</b>&nbsp;
                {% if affiliation.unjoinedat %}
                e término em &nbsp;<b>{{ affiliation.unjoinedat }}</b>&nbsp;
                {% endif %}
                ;<br>
              </div>
            </div>
          </div>
          {% endfor %}
        {% endif %}
        </div>

        {% if enableToggleBlocked %}
          {% if formMethod == 'PUT' %}
          <div class="fields">
            <div class="eight wide field">
              <div class="ui checkbox">
                <input type="hidden" name="blocked"
                       value="{% if getValue('blocked')|toBoolean %}true{% else %}false{% endif %}">
                <input class="hidden" type="checkbox"
                       name="_blocked"
                       {% if getValue('blocked')|toBoolean %}checked="checked"{% endif %}>
                <label>
                  Bloquear este cliente e
                  {% if juridicalperson %}
                    todas as suas unidades/filiais
                  {% else %}
                    todos os seus dependentes
                  {% endif %}
                </label>
              </div>
            </div>
          </div>
          {% endif %}
        {% else %}
          {% if getValue('blocked')|toBoolean %}
          <div class="fields">
            <div class="eight wide darkred field">
              <i class="lock icon"
                 style="font-size: 1.8em; line-height: 1em; vertical-align: middle;"></i>
              Este cliente está bloqueado e, por consequência, todas suas unidades/filiais.
            </div>
          </div>
          {% endif %}
        {% endif %}

        {% set subsidiaries = getValue('subsidiaries') %}
        {% for subsidiaryNumber, subsidiary in subsidiaries %}
          {% set subsidiaryIndicator = "%02d"|format(subsidiaryNumber) %}
          {% include 'erp/cadastre/customers/subsidiary.twig' with { documentTypes: documentTypes, mailingProfiles:mailingProfiles, phoneTypes: phoneTypes, subsidiaryIndicator: subsidiaryIndicator, subsidiaryNumber: subsidiaryNumber, subsidiary: subsidiary, editMode: editMode, enableToggleBlocked: enableToggleBlocked, juridicalperson: juridicalperson, formMethod: formMethod }  %}
          {% if loop.first %}
          <div id="subsidiaryList" class="form-list">
          {% endif %}
          {% if loop.last %}
          </div>
          {% endif %}
        {% endfor %}
        {% if editMode %}
        <div class="ui bottom attached vertical segment" style="border-top: 1px solid rgba(34,36,38,.15); border-left: none; border-right: none;">
          <button type="button" class="ui mini green right labeled icon button"
                  onclick="addSubsidiary();">
            <i class="plus icon"></i>
            {% if juridicalperson %}
              Adicionar unidade/filial
            {% else %}
              Adicionar dependente
            {% endif %}
          </button>
        </div>
        {% endif %}

        <div class="fields">
          <div class="sixteen wide field{{ cssError('note') }}">
            <label>Observação</label>
            <div class="ui input{{ readonly }}">
              <textarea name="note" rows="4" {{ readonly }}
                        placeholder="Faça um breve comentário...">{{ getValue('note') }}</textarea>
            </div>
            {% if hasError('note') %}
            <small class="helper">{{ getError('note') }}</small>
            {% endif %}
          </div>
        </div>

        <h3 class="ui header">Monitoramento dos ve&iacute;culos</h3>
        <div class="fields">
          <div class="sixteen wide field">
            <div class="ui checkbox{{ readonly }}" style="margin-top: 0;">
              <input name="enableatmonitoring" type="hidden"
                     value="{% if getValue('enableatmonitoring')|toBoolean %}true{% else %}false{% endif %}">
              <input name="_enableatmonitoring" type="checkbox"
                     class="hidden" {{ readonly }}
                     {% if getValue('enableatmonitoring')|toBoolean %}checked="checked"{% endif %}>
              <label>Habilitar os ve&iacute;culos deste cliente na Central de Monitoramento</label>
            </div>
          </div>
        </div>

        <div class="monitoringdata">
          <div class="fields">
            <div class="sixteen wide field{{ cssError('monitoringid') }}">
              <label>Empresa de monitoramento</label>
              {% if editMode %}
              <div class="ui search selection dropdown">
                <input name="monitoringid" type="hidden"
                      value="{{ getValue('monitoringid') }}">
                <i class="dropdown icon"></i>
                <div class="default text">Informe a empresa de monitoramento</div>
                <div class="menu">
                  {% for monitoringCompany in monitoringCompanies %}
                    <div class="vertical item" {% if monitoringCompany.id == getValue('monitoringid') %}selected{% endif %}
                        data-value="{{ monitoringCompany.id }}"
                        data-text="{{ monitoringCompany.name }}">
                      <span class="text">
                        {{ monitoringCompany.name }}
                      </span>
                    </div>
                  {% endfor %}
                </div>
              </div>
              {% else %}
              <div class="field static">
                <span class="darking">{{ getValue('monitorycompanyname') }}&nbsp;</span>
              </div>
              {% endif %}
              {% if hasError('monitoringid') %}
              <small class="helper">{{ getError('monitoringid') }}</small>
              {% endif %}

            </div>
          </div>
          
          <div class="fields">
            <div class="sixteen wide field{{ cssError('noteformonitoring') }}">
              <label>Avisos/notas para a central de monitoramento</label>
              <div class="ui input{{ readonly }}">
                <textarea name="noteformonitoring" rows="4" {{ readonly }}
                          placeholder="Insira informações relevantes para a central de monitoramento...">{{ getValue('noteformonitoring') }}</textarea>
              </div>
              {% if hasError('noteformonitoring') %}
              <small class="helper">{{ getError('noteformonitoring') }}</small>
              {% endif %}
            </div>
          </div>

          <h4 class="ui header">Providências em caso de emergência</h4>
          
          <div class="fields">
            <div class="sixteen wide field{{ cssError('emergencyinstructions') }}">
              <label>Instruções para situações de emergência</label>
              <div class="ui input{{ readonly }}">
                <textarea name="emergencyinstructions" rows="4" {{ readonly }}
                          placeholder="Insira informações relevantes para a central de monitoramento...">{{ getValue('emergencyinstructions') }}</textarea>
              </div>
              {% if hasError('emergencyinstructions') %}
              <small class="helper">{{ getError('emergencyinstructions') }}</small>
              {% endif %}
            </div>
          </div>

          <div class="fields">
            <div class="four wide field">
              <label>Pronta-resposta</label>
              <div class="ui toggle checkbox{{ readonly }}" style="margin-top: 0;">
                <input name="dispatchrapidresponse" type="hidden"
                      value="{% if getValue('dispatchrapidresponse')|toBoolean %}true{% else %}false{% endif %}">
                <input name="_dispatchrapidresponse" type="checkbox"
                      class="hidden" {{ readonly }}
                      {% if getValue('dispatchrapidresponse')|toBoolean %}checked="checked"{% endif %}>
                <label>Acionar pronta-resposta</label>
              </div>
            </div>

            <div class="twelve wide field{{ cssError('rapidresponseid') }}">
              <label>Informe a empresa de pronta-resposta</label>
              {% if editMode %}
              <div class="ui search selection dropdown">
                <input name="rapidresponseid" type="hidden"
                      value="{{ getValue('rapidresponseid') }}">
                <i class="dropdown icon"></i>
                <div class="default text">Informe a empresa de pronta-resposta</div>
                <div class="menu">
                  {% for rapidResponseCompany in rapidResponseCompanies %}
                    <div class="vertical item" {% if rapidResponseCompany.id == getValue('rapidresponseid') %}selected{% endif %}
                        data-value="{{ rapidResponseCompany.id }}"
                        data-text="{{ rapidResponseCompany.name }}">
                      <span class="text">
                        {{ rapidResponseCompany.name }}
                      </span>
                    </div>
                  {% else %}
                    <div class="vertical item" {% if getValue('relationshipid') == 0 %}selected{% endif %}
                        data-value="0"
                        data-text="Sem empresas de pronta-resposta cadastradas">
                      <span class="text">
                        Sem empresas de pronta-resposta cadastradas
                      </span>
                    </div>
                  {% endfor %}
                </div>
              </div>
              {% else %}
              <div class="field static">
                <span class="darking">{{ getValue('documenttypename') }}&nbsp;</span>
              </div>
              {% endif %}
              {% if hasError('monitoringid') %}
              <small class="helper">{{ getError('monitoringid') }}</small>
              {% endif %}

            </div>
          </div>

          <div class="fields">
            <div class="eight wide field{{ cssError('securitypassword') }}">
              <label>
                Senha de segurança
              </label>
              <div class="ui input{{ readonly }}">
                <input name="securitypassword" type="text" maxlength="100"
                      placeholder="Informe uma pergunta de segurança..."
                      {{ readonly }}
                      value="{{ getValue('securitypassword') }}">
              </div>
              {% if hasError('securitypassword') %}
              <small class="helper">{{ getError('securitypassword') }}</small>
              {% endif %}
            </div>

            <div class="eight wide field{{ cssError('verificationpassword') }}">
              <label>
                Contra-senha
              </label>
              <div class="ui input{{ readonly }}">
                <input name="verificationpassword" type="text" maxlength="100"
                      placeholder="Informe uma pergunta de segurança..."
                      {{ readonly }}
                      value="{{ getValue('verificationpassword') }}">
              </div>
              {% if hasError('verificationpassword') %}
              <small class="helper">{{ getError('verificationpassword') }}</small>
              {% endif %}
            </div>
          </div>
        </div>

        <div class="fields" style="margin-to">
          <div class="sixteen wide field buttons">
            {% if editMode %}
            <button type="button" class="ui youtube right labeled icon button"
                    onclick="location.href='{{ path_for(previous) }}';">
              <i class="remove icon"></i> Cancelar
            </button>
            <button type="submit" class="ui submit primary right labeled icon button">
              <i class="checkmark icon"></i> {% if formMethod == 'POST' %}Adicionar{% else %}Modificar{% endif %}
            </button>
            {% else %}
            <button type="button" class="ui blue labeled icon button"
                    onclick="location.href='{{ path_for(previous) }}';">
              <i class="chevron left icon"></i> Retornar
            </button>
            {% endif %}
          </div>
        </div>

        {{ csrf() }}

        <input type="hidden" name="_method" value="{{ formMethod }}">
        {% if formMethod == 'PUT' %}
        <input type="hidden" name="entityid" value="{{ getValue('entityid') }}">
        {% else %}
        <input type="hidden" name="step" value="2">
        <input type="hidden" name="relationshipid" value="{{ getValue('relationshipid') }}">
        {% endif %}
      </form>
      <!-- Fim formulário -->

      {% if formMethod == 'PUT' %}
      <!-- Início painel informativo de modificações -->
      <div class="ui segments">
        <div class="ui grey inverted segment">
          <h5>
            Histórico de modificações:
          </h5>
          Cadastrado {{ getValue('createdat')|localizedDate('long') }} por {{ getValue('createdbyusername') }}
          <div class="ui divider"></div>
          Modificado {{ getValue('updatedat')|localizedDate('long') }} por {{ getValue('updatedbyusername') }}
        </div>
      </div>
      <!-- Fim painel informativo de modificações -->
      {% endif %}
    </div>
    <!-- Fim conteúdo do módulo -->
  </div>
{% endblock %}
{% block dialogs %}
  {% include 'templates/erp/partials/dialogs/error.twig' %}
  {% include 'templates/erp/partials/dialogs/info.twig' %}
  {% include 'templates/erp/partials/dialogs/question.twig' %}
  {% include 'templates/erp/partials/dialogs/warning.twig' %}
    
  <!-- Start audio error -->
  <audio id="errorSound">
    <source src="/sounds/error.ogg" type="audio/ogg">
    <source src="/sounds/error.mp3" type="audio/mpeg">
    <source src="/sounds/error.wav" type="audio/wav">
  </audio>
  <!-- End audio error -->
{% endblock dialogs %}
{% block scripts %}
  {{ parent() }}

  {{ lib('semantic-ui/components/requisitions.min.js') }}
  {{ lib('jquery/plugins/autocomplete/autocomplete.min.js') }}
  {{ lib('jquery/plugins/masked.input/masked.input.min.js') }}
  {{ lib('template-engine/template.engine.min.js') }}
  {{ lib('extension/extension.min.js') }}
  
  {% set getCityNameCompletion = { 'URL': 'ERP\\Parameterization\\Cities\\Autocompletion\\Get', 'method': 'PATCH' } %}
  {% set getPostalCodeData     = { 'URL': 'ERP\\Parameterization\\Cities\\PostalCode\\Get', 'method': 'PATCH' } %}
  {% set toggleBlocked         = { 'URL': 'ERP\\Cadastre\\Customers\\ToggleBlocked', 'method': 'PUT' } %}
  {% set enableToggleBlocked   = authorization.getAuthorizationFor(toggleBlocked.URL, toggleBlocked.method) %}
  {% set juridicalperson       = getValue('juridicalperson')|toBoolean %}
  
  {% apply minify %}
  <script>
    {% set subsidiaries = getValue('subsidiaries') %}
    {% set emergencyphones = getValue('emergencyphones') %}
    var
      // O índice de contagem das unidades/filiais
      subsidiariesCount   = {{ subsidiaries|length }},

      // Os índices de contagem dos telefones e contatos adicionais de
      // cada unidade/filial
      subsidiariesDetails = [],

      // O índice de contagem dos telefones de emergência
      emergencyPhonesCount = {{ emergencyphones|length }},

      // O tipo de entidade selecionada
      entityTypeID        = {{ getValue('entitytypeid') }}
    ;

    // Determina a quantidade de telefones, e-mails e contatos em cada
    // unidade/filial existente
    {% for subsidiaryNumber, subsidiary in subsidiaries %}
    subsidiariesDetails[{{ subsidiaryNumber }}] = {
      phonesCount: {{ subsidiary.phones|length }},
      emailsCount: {{ subsidiary.emails|length }},
      contactsCount: {{ subsidiary.contacts|length }}
    };
    {% endfor %}
    
    // Carrega o template de uma nova unidade/filial, definindo os
    // valores padrões
    {% if juridicalperson %}
      {% set defaultDocumentTypeID = 4 %}
    {% else %}
      {% set defaultDocumentTypeID = 1 %}
    {% endif %}
    {% set subsidiaryTemplate %}
      {% include 'erp/cadastre/customers/subsidiary.twig' with { documentTypes: documentTypes, mailingProfiles: mailingProfiles, phoneTypes: phoneTypes, subsidiaryIndicator: "<%=subsidiaryIndicator%>", subsidiaryNumber: "<%=subsidiaryNumber%>", subsidiary: { subsidiaryid: 0, headoffice: false, regionaldocumenttype: defaultDocumentTypeID, maritalstatusid: 1, genderid: 1, cityid: 0, phones: { 0: { phonetypeid: 1 } }, emails: { 0: { } }, contacts: { } }, editMode: true, enableToggleBlocked: enableToggleBlocked, juridicalperson: juridicalperson, formMethod: formMethod }  %}
    {% endset %}
    var subsidiaryTemplate = '{{ subsidiaryTemplate|escape('js') }}'.replace(/&lt;/g,'<').replace(/&gt;/g,'>');
    
    // Carrega o template de um novo telefone, definindo os valores
    // padrões
    {% set phoningTemplate %}
      {% include 'erp/cadastre/customers/phone.twig' with { phoneTypes: phoneTypes, subsidiaryNumber: "<%=subsidiaryNumber%>", phoneNumber: '<%=phoneNumber%>', phone: { phoneid: 0, phonetypeid: 1 }, editMode: true }  %}
    {% endset %}
    var phoningTemplate = '{{ phoningTemplate|escape('js') }}'.replace(/&lt;/g,'<').replace(/&gt;/g,'>');
    
    // Carrega o template de um novo telefone de emergência, definindo
    // os valores padrões
    {% set emergencyPhoningTemplate %}
      {% include 'erp/cadastre/customers/emergencyphone.twig' with { phoneTypes: phoneTypes, phoneNumber: '<%=phoneNumber%>', phone: { phoneid: 0, phonetypeid: 1 }, editMode: true }  %}
    {% endset %}
    var emergencyPhoningTemplate = '{{ emergencyPhoningTemplate|escape('js') }}'.replace(/&lt;/g,'<').replace(/&gt;/g,'>');
    
    // Carrega o template de um novo e-mail, definindo os valores
    // padrões
    {% set emailTemplate %}
      {% include 'erp/cadastre/customers/mailing.twig' with { subsidiaryNumber: "<%=subsidiaryNumber%>", emailNumber: '<%=emailNumber%>', mailing: { mailingid: 0 }, editMode: true }  %}
    {% endset %}
    var emailTemplate = '{{ emailTemplate|escape('js') }}'.replace(/&lt;/g,'<').replace(/&gt;/g,'>');

    // Carrega o template de um novo contato adicional, definindo os
    // valores padrões
    {% set contactTemplate %}
      {% include 'erp/cadastre/customers/mailingaddress.twig' with { mailingProfiles: mailingProfiles, phoneTypes: phoneTypes, subsidiaryNumber: "<%=subsidiaryNumber%>", contactNumber: '<%=contactNumber%>', contact: { mailingaddressid: 0, mailingprofileid: defaultMailingProfileID, phonetypeid: 1 }, editMode: true }  %}
    {% endset %}
    var contactTemplate = '{{ contactTemplate|escape('js') }}'.replace(/&lt;/g,'<').replace(/&gt;/g,'>');

    $(document).ready(function() {
      // -------------------------------[ Componentes do formulário ]---
      $('.form .ui.dropdown')
        .dropdown()
      ;
      $('.ui.checkbox')
        .checkbox(checkboxOptions)
      ;

      // Realiza o tratamento de mascaramento dos campos e
      // autopreenchimento em função dos valores iniciais
      $("input[name='name']")
        .blur(nameHandler)
        .trigger("blur")
      ;
      
      // Mascara os campos e habilita os eventos para tratamento da
      // atualização na tela de cada unidade/filial
      for (var subsidiaryNumber = 0; subsidiaryNumber < subsidiariesCount; subsidiaryNumber++) {
        // Realiza o tratamento de mascaramento dos campos e
        // autopreenchimento em função dos valores
        $("input[name='subsidiaries[" + subsidiaryNumber + "][regionaldocumentstate]']")
          .mask({
            type: 'state',
            validate: true
          })
        ;
        {% if juridicalperson %}
        $("input[name='subsidiaries[" + subsidiaryNumber + "][nationalregister]']")
          .mask({
            type: 'cnpj',
            validate: true
          })
        ;
        {% else %}
        $("input[name='subsidiaries[" + subsidiaryNumber + "][nationalregister]']")
          .mask({
            type: 'cpf',
            validate: true
          })
        ;
        {% endif %}
        $("input[name='subsidiaries[" + subsidiaryNumber + "][birthday]']")
          .mask({
            type: 'date',
            validate: true
          })
          .blur(birthdayHandler)
          .trigger("blur")
        ;
        $("input[name='subsidiaries[" + subsidiaryNumber + "][cityname]']")
          .autocomplete(cityNameCompletionOptions)
        ;
        $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']")
          .mask({
            type: 'postalCode'
          })
          .blur(postalCodeHandler)
        ;
        
        // Define o CEP corrente para o tratamento correto do preenchimento
        // do formulário
        $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']")
          .prop('currentPostalCode', $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']").val())
        ;
        
        // Força o mascaramento dos campos de telefones
        for (var phoneNumber = 0; phoneNumber < subsidiariesDetails[ subsidiaryNumber ].phonesCount; phoneNumber++) {
          $("input[name='subsidiaries[" + subsidiaryNumber + "][phones][" + phoneNumber + "][phonenumber]']")
            .mask({
              type: 'phoneNumber'
            })
          ;
        }
        
        // Força o mascaramento dos campos de telefones nos contatos
        // adicionais
        for (var contactNumber = 0; contactNumber < subsidiariesDetails[ subsidiaryNumber ].contactsCount; contactNumber++) {
          $("input[name='subsidiaries[" + subsidiaryNumber + "][contacts][" + contactNumber + "][phonenumber]']")
            .mask({
              type: 'phoneNumber'
            })
          ;
        }

        var
          count = $(".contactList[subsidiary='" + subsidiaryNumber + "']")
            .children('.mailing.grid').length
        ;

        if (count > 0) {
          // Se temos um ou mais contatos adicionais, garantimos que a
          // respectiva informação de aviso de que não temos contatos
          // esteja oculta
          $(".contactList[subsidiary='" + subsidiaryNumber + "']")
            .children('.nocontent')
            .hide()
          ;
        }
      }

      $("input[name='_enableatmonitoring']")
        .change(monitoringDataHandler)
      ;
      toggleMonitoringData($("input[name='_enableatmonitoring']").is(":checked"));

      // Força o mascaramento dos campos de telefones de emergência
      for (var emergencyPhoneNumber = 0; emergencyPhoneNumber < emergencyPhonesCount; emergencyPhoneNumber++) {
        $("input[name='emergencyphones[" + emergencyPhoneNumber + "][phonenumber]']")
          .mask({
            type: 'phoneNumber'
          })
        ;
      }

      // Coloca o foco no primeiro campo
      $("input[name='name']")
        .focus()
      ;
    });
    

    // =================================================[ Options ]=====

    // As opções para os checkbox
    var checkboxOptions = {
      // Dispara ao iniciar para definir o valor, se necessário
      onChange   : function() {
        var
          checkbox = $(this).prop('name'),
          // Invertemos o valor atual
          checked = !($(this).attr('checked') !== undefined && $(this).attr('checked')),
          boolValue = (checked
            ? 'true'
            : 'false'),
          toggleField = checkbox.replace('_','')
        ;

        // Invertemos o checkbox fake
        $(this)
          .attr('checked', checked)
        ;

        // Alteramos o valor do verdadeiro input
        $("input[name='" + toggleField + "']")
          .val(boolValue)
        ;
      }
    };

    // As opções para o componente de autocompletar o nome da cidade
    var cityNameCompletionOptions = {
      autoSelectFirst: true,
      searchOnFocus: false,
      ajax: {
        url: "{{ path_for(getCityNameCompletion.URL) }}",
        type: "{{ getCityNameCompletion.method }}",
        data: function(params, options) {
          params.state = '';
        }
      },
      onFormatResult: function(searchTerm, suggestion, index) {
        return ''
          + '<div class="content">'
          +   '<div class="title">' + suggestion.name + ' / '
          +     '<span style="color: CornflowerBlue; font-style: italic;">'
          +       suggestion.state
          +     '</span>'
          +   '</div>'
          + '</div>'
        ;
      },
      onSelect: function(element, suggestion) {
        // Recupera o ID da filial para a qual a cidade foi completada
        var subsidiaryNumber = $(this).attr("subsidiary");
        
        // Armazena o ID do item selecionado
        $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
          .val(suggestion.id)
        ;
        $("input[name='subsidiaries[" + subsidiaryNumber + "][state]']")
          .val(suggestion.state)
        ;
      },
      onInvalidateSelection: function() {
        // Recupera o ID da filial para a qual a cidade foi completada
        var subsidiaryNumber = $(this).attr("subsidiary");
        
        // Limpa as informações de cidade selecionada
        $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
          .val(0)
        ;
        $("input[name='subsidiaries[" + subsidiaryNumber + "][state]']")
          .val('')
        ;
      }
    };


    // ================================================[ Handlers ]=====

    // Faz o tratamento do campo nome para permitir atualizar o nome do
    // primeiro cliente quando o mesmo for pessoa física
    function nameHandler()
    {
      var
        name            = $(this).val(),
        juridicalperson = $("input[name='juridicalperson']").val()==="true"
          ? true
          : false
      ;

      // Conforme o tipo de pessoa que estamos lidando, realiza o devido
      // tratamento
      if (juridicalperson) {
        // Pessoa jurídica, não faz nada
      } else {
        // Pessoa física
        
        // Atribui o nome do cliente ao nome do primeiro titular
        $("input[name='subsidiaries[0][name]']")
          .val(name)
        ;

        if (name === "") {
          $("input[name='subsidiaries[0][name]']")
            .prev()
            .html("&nbsp;")
            .trigger("change")
          ;
        } else {
          $("input[name='subsidiaries[0][name]']")
            .prev()
            .text(name)
            .trigger("change")
          ;
        }
      }
    }

    // O manipulador do campo de data de nascimento, em que atualiza a
    // idade
    function birthdayHandler() {
      var
        // Recupera o ID da filial para a qual a data de nascimento foi
        // preenchida
        subsidiaryNumber = $(this).attr("subsidiary"),
        birthdayDate     = $(this).val()
      ;

      // Ignora qualquer modificação se estivermos em um campo somente
      // leitura
      if ($(this).prop('readonly')) {
        return;
      }

      // Verifica se a idade é válida
      if (birthdayDate.length === 10) {
        var
          parts    = birthdayDate.split("/"),
          day      = parseInt(parts[0]),
          month    = parseInt(parts[1]),
          year     = parseInt(parts[2]),
          birthday = new Date(year, month-1, day),
          today    = new Date(),
          isLeap   = function (year) {
            return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
          },
          // Calcula a quantidade de dias desde a data de nascimento
          days     = Math.floor((today.getTime() - birthday.getTime())/1000/60/60/24),
          age      = 0
        ;

        // Percorre os anos
        for (var y = birthday.getFullYear(); y <= today.getFullYear(); y++) {
          var
            daysInYear = isLeap(y)
              ? 366
              : 365
          ;

          if (days >= daysInYear) {
            // Incrementamos a idade somente se houver dias suficientes
            // para completar mais um ano
            days -= daysInYear;
            age++;
          }
        }

        // Coloca a data calculada no campo de idade
        $("input[name='subsidiaries[" + subsidiaryNumber + "][age]']")
          .val(age + ' anos')
          .trigger("change")
        ;
      } else {
        // Não foi fornecida uma data, então ignora
        $("input[name='subsidiaries[" + subsidiaryNumber + "][age]']")
          .val('')
          .trigger("change")
        ;
      }
    }
    
    // O manipulador do campo de autocompletar o CEP
    function postalCodeHandler() {
      var
        // Recupera o ID da filial para a qual o CEP foi completado
        subsidiaryNumber  = $(this).attr("subsidiary"),
        currentPostalCode = $(this).val()
      ;

      // Ignora qualquer modificação se estivermos em um campo somente
      // leitura
      if ($(this).prop('readonly')) {
        return;
      }

      // Verifica se o CEP é válido
      if (currentPostalCode.length > 0) {
        // Remove espaços
        currentPostalCode = currentPostalCode.replace(/^s+|s+$/g, '');

        // Verifica se o CEP está no formato válido
        var cepER = /^[0-9]{5}-[0-9]{3}$/;
        if (!cepER.test(currentPostalCode)) {
          // Não foi fornecido um CEP válido, então alerta o usuário
          warningDialog('Desculpe', 'O CEP informado é inválido.');

          return;
        }
      } else {
        // Não foi fornecido um CEP, então ignora
        return;
      }
      
      // Verifica se o valor foi alterado...
      if ($(this).prop('currentPostalCode') !== $(this).val()) {
        // Atualiza o valor armazenado
        $(this)
          .prop('currentPostalCode', $(this).val())
        ;
        
        // Recupera o CEP preenchido sem pontuação
        var
          postalCode = $(this).val().replace(/-/g, ''),
          textFields = [
            'address',
            'district',
            'cityname',
            'state'
          ]
        ;
        
        // Verifica se campo possui um CEP preenchido
        if (postalCode != "") {
          // Preenche os campos com "..." enquanto consulta o Web Service
          textFields.forEach(function(field) {
            $("input[name='subsidiaries[" + subsidiaryNumber + "][" + field + "]']")
              .val("...")
              .trigger("change")
            ;
          });
          $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
            .val(0)
          ;
          
          // Consulta o Web Service para obter os dados pelo CEP
          var url = "{{ path_for(getPostalCodeData.URL) }}";
          requestJSONData(url, { postalCode: postalCode },
          function (addressData, params, message) {
            // Conseguiu localizar um endereço com base nos valores
            // informados, então atualiza o formulário
            textFields.forEach(function(field) {
              $("input[name='subsidiaries[" + subsidiaryNumber + "][" + field + "]']")
                .val(addressData[field])
              ;
            });
            $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
              .val(addressData.cityid)
            ;
            
            // Coloca em foco o campo de número
            $("input[name='subsidiaries[" + subsidiaryNumber + "][streetnumber]']")
              .focus()
            ;
          },
          function (data, params, message) {
            // Não conseguiu localizar os dados do endereço com base
            // no CEP informado, então limpa os dados atuais
            textFields.forEach(function(field) {
              $("input[name='subsidiaries[" + subsidiaryNumber + "][" + field + "]']")
                .val('')
                .trigger("change")
              ;
            });
            $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
              .val(0)
            ;
          });
        } else {
          // O CEP não foi fornecido
          textFields.forEach(function(field) {
            $("input[name='subsidiaries[" + subsidiaryNumber + "][" + field + "]']")
              .val('')
              .trigger("change")
            ;
          });
          $("input[name='subsidiaries[" + subsidiaryNumber + "][cityid]']")
            .val(0)
          ;
        }
      }
    }
    
    // Faz a adição de uma unidade/filial
    var addSubsidiary = function() {
      var
        subsidiaryNumber = subsidiariesCount,
        phoneNumber      = 1,
        emailNumber      = 1,
        contactNumber    = 0,
        juridicalperson  = $("input[name='juridicalperson']").val()==="true"
          ? true
          : false
      ;

      // Determina o número da unidade/filial
      subsidiariesCount++;

      // Inicializa os contadores de telefones, e-mails e contatos
      // adicionais nesta unidade/filial
      subsidiariesDetails[ subsidiaryNumber ] = {
        phonesCount: 1,
        emailsCount: 1,
        contactsCount: 0
      };

      // Adiciona um conjunto de campos para a nova unidade/filial
      $("#subsidiaryList")
        .append(TemplateEngine(subsidiaryTemplate, {
          subsidiaryIndicator: (subsidiaryNumber).toString().padLeftWithZeros(2),
          subsidiaryNumber: subsidiaryNumber,
          phoneNumber: phoneNumber,
          emailNumber: emailNumber,
          contactNumber: contactNumber
        }))
      ;
      
      $('.ui.selection.dropdown')
        .dropdown()
      ;
      $('.ui.menu .ui.dropdown')
        .dropdown({
          on: 'hover'
        })
      ;

      // Realiza o tratamento de mascaramento dos campos e autopreenchimento
      // em função dos valores
      $("input[name='subsidiaries[" + subsidiaryNumber + "][regionaldocumentstate]']")
        .mask({
          type: 'state',
          validate: true
        })
      ;
      {% if juridicalperson %}
      $("input[name='subsidiaries[" + subsidiaryNumber + "][nationalregister]']")
        .mask({
          type: 'cnpj',
          validate: true
        })
      ;
      {% else %}
      $("input[name='subsidiaries[" + subsidiaryNumber + "][nationalregister]']")
        .mask({
          type: 'cpf',
          validate: true
        })
      ;
      {% endif %}
      $("input[name='subsidiaries[" + subsidiaryNumber + "][birthday]']")
        .mask({
          type: 'date',
          validate: true
        })
        .blur(birthdayHandler)
      ;
      $("input[name='subsidiaries[" + subsidiaryNumber + "][cityname]']")
        .autocomplete(cityNameCompletionOptions)
      ;
      $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']")
        .mask({
          type: 'postalCode'
        })
        .blur(postalCodeHandler)
      ;
      
      // Define o CEP corrente para o tratamento correto do preenchimento
      // do formulário
      $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']")
        .prop('currentPostalCode', $("input[name='subsidiaries[" + subsidiaryNumber + "][postalcode]']").val())
      ;
        
      // Força o mascaramento dos campos de telefones
      for (var phoneNumber = 0; phoneNumber < subsidiariesDetails[ subsidiaryNumber ].phonesCount; phoneNumber++) {
        $("input[name='subsidiaries[" + subsidiaryNumber + "][phones][" + phoneNumber + "][phonenumber]']")
          .mask({
            type: 'phoneNumber'
          })
        ;
      }
      
      // Força o mascaramento dos campos de telefones nos contatos
      // adicionais
      for (var contactNumber = 0; contactNumber < subsidiariesDetails[ subsidiaryNumber ].contactsCount; contactNumber++) {
        $("input[name='subsidiaries[" + subsidiaryNumber + "][contacts][" + contactNumber + "][phonenumber]']")
          .mask({
            type: 'phoneNumber'
          })
        ;
      }
      
      // Trata o checkbox corretamente
      $('.ui.checkbox')
        .checkbox(checkboxOptions)
      ;
      
      // Coloca em foco o campo inicial da nova unidade/filial
      $("input[name='subsidiaries[" + subsidiaryNumber + "][name]']")
        .focus()
      ;
    };
    
    // Faz a remoção de uma unidade/filial
    var delSubsidiary = function(element) {
      $(element)
        .closest('.subsidiary.entry')
        .remove()
      ;
    };

    // Faz a adição de um telefone
    var addPhone = function(subsidiaryNumber) {
      var
        // Determina a quantidade de telefones nesta unidade/filial
        phoneNumber = subsidiariesDetails[ subsidiaryNumber ].phonesCount
      ;

      // Adiciona um conjunto de campos para o novo telefone
      subsidiariesDetails[ subsidiaryNumber ].phonesCount++;
      $(".phoneList[subsidiary='" + subsidiaryNumber + "']")
        .append(TemplateEngine(phoningTemplate, {
          subsidiaryNumber: subsidiaryNumber,
          phoneNumber: phoneNumber
        }))
      ;
      
      $('.ui.selection.dropdown')
        .dropdown()
      ;
      $('.ui.menu .ui.dropdown')
        .dropdown({
          on: 'hover'
        })
      ;
      
      // Mascara o campo de telefone
      $("input[name='subsidiaries[" + subsidiaryNumber + "][phones][" + phoneNumber + "][phonenumber]']")
        .mask({
          type: 'phoneNumber'
        })
      ;
      
      // Coloca em foco o campo inicial do novo telefone
      $("input[name='subsidiaries[" + subsidiaryNumber + "][phones][" + phoneNumber + "][phonenumber]']")
        .focus()
      ;
    };
    
    // Faz a remoção de um telefone
    var delPhone = function(element) {
      var
        // Recupera o ID do telefone
        phoneNumber = parseInt($(element).attr("phoneNumber"))
      ;

      if (phoneNumber > 0) {
        $(element)
          .closest('.phoning.grid')
          .remove()
        ;
      }
    };
    
    // Faz a adição de um e-mail
    var addEmail = function(subsidiaryNumber) {
      var
        // Determina a quantidade de e-mails nesta unidade/filial
        emailNumber = subsidiariesDetails[ subsidiaryNumber ].emailsCount
      ;

      // Adiciona um conjunto de campos para o novo e-mail
      subsidiariesDetails[ subsidiaryNumber ].emailsCount++;
      $(".emailList[subsidiary='" + subsidiaryNumber + "']")
        .append(TemplateEngine(emailTemplate, {
          subsidiaryNumber: subsidiaryNumber,
          emailNumber: emailNumber
        }))
      ;
      
      // Coloca em foco o campo inicial do novo e-mail
      $("input[name='subsidiaries[" + subsidiaryNumber + "][emails][" + emailNumber + "][email]']")
        .focus()
      ;
    };
    
    // Faz a remoção de um e-mail
    var delEmail = function(element) {
      var
        // Recupera o ID do e-mail
        emailNumber = parseInt($(element).attr("emailNumber"))
      ;

      if (emailNumber > 0) {
        $(element)
          .closest('.mailing.grid')
          .remove()
        ;
      }
    };
    
    // Faz a adição de um contato adicional
    var addContact = function(subsidiaryNumber) {
      var
        // Determina a quantidade de contatos nesta unidade/filial
        contactNumber = subsidiariesDetails[ subsidiaryNumber ].contactsCount
      ;

      // Como temos um contato adicional, garantimos que a respectiva
      // informação de aviso de que não temos contatos esteja oculta
      $(".contactList[subsidiary='" + subsidiaryNumber + "']")
        .children('.nocontent')
        .hide()
      ;

      // Adiciona um conjunto de campos para o novo contato
      subsidiariesDetails[ subsidiaryNumber ].contactsCount++;
      $(".contactList[subsidiary='" + subsidiaryNumber + "']")
        .append(TemplateEngine(contactTemplate, {
          subsidiaryNumber: subsidiaryNumber,
          contactNumber: contactNumber
        }))
      ;
      
      $('.ui.selection.dropdown')
        .dropdown()
      ;
      $('.ui.menu .ui.dropdown')
        .dropdown({
          on: 'hover'
        })
      ;
      
      // Mascara o campo de telefone
      $("input[name='subsidiaries[" + subsidiaryNumber + "][contacts][" + contactNumber + "][phonenumber]']")
        .mask({
          type: 'phoneNumber'
        })
      ;
      
      // Coloca em foco o campo inicial do novo contato
      $("input[name='subsidiaries[" + subsidiaryNumber + "][contacts][" + contactNumber + "][name]']")
        .focus()
      ;
    };
    
    // Faz a remoção de um contato
    var delContact = function(element) {
      var
        // Recupera o ID do contato
        contactNumber = parseInt($(element).attr("contactNumber")),
        subsidiaryNumber = parseInt($(element).attr("subsidiaryNumber"))
      ;

      $(element)
        .closest('.mailing.address.grid')
        .remove()
      ;

      var
        count = $(".contactList[subsidiary='" + subsidiaryNumber + "']")
          .children('.mailing.address.grid').length
      ;

      if (count == 0) {
        // Se não tivermos nenhum contato adicional, precisamos exibir a
        // respectiva informação de aviso de que não temos contatos
        // adicionais
        $(".contactList[subsidiary='" + subsidiaryNumber + "']")
          .children('.nocontent')
          .show()
        ;
      }
    };

    // Faz a adição de um telefone de emergência
    var addEmergencyPhone = function() {
      var
        // Determina a quantidade de telefones de emergência
        phoneNumber = emergencyPhonesCount
      ;

      // Adiciona um conjunto de campos para o novo telefone
      emergencyPhonesCount++;
      $(".emergencyPhoneList")
        .append(TemplateEngine(emergencyPhoningTemplate, {
          phoneNumber: phoneNumber
        }))
      ;
      
      $('.ui.selection.dropdown')
        .dropdown()
      ;
      $('.ui.menu .ui.dropdown')
        .dropdown({
          on: 'hover'
        })
      ;
      
      // Mascara o campo de telefone
      $("input[name='emergencyphones[" + phoneNumber + "][phonenumber]']")
        .mask({
          type: 'phoneNumber'
        })
      ;
      
      // Coloca em foco o campo inicial do novo telefone
      $("input[name='emergencyphones[" + phoneNumber + "][phonenumber]']")
        .focus()
      ;
    };
    
    // Faz a remoção de um telefone de emergência
    var delEmergencyPhone = function(element) {
      var
        // Recupera o ID do telefone
        phoneNumber = parseInt($(element).attr("phoneNumber"))
      ;

      if (phoneNumber > 0) {
        $(element)
          .closest('.phoning.grid')
          .remove()
        ;
      }
    };

    // -------------------------------------[ Monitoring Handlers ]-----

    /**
     * Faz o tratamento do campo que indica se os veículos do cliente
     * devem ser espelhados para a central de monitoramento.
     *
     * @return void
     */
    function monitoringDataHandler() {
      toggleMonitoringData($(this).is(":checked"));
    }

    /**
     * Lida com a exibição dos campos de dados para monitoramento.
     *
     * @param bool enableAtMonitoring
     *   O indicativo se os veículos do cliente devem ser espelhados
     *   para a central de monitoramento
     *
     * @return void
     */
    function toggleMonitoringData(enableAtMonitoring) {
      if (enableAtMonitoring) {
        //Exibe os campos com os dados de monitoramento
        $("div.monitoringdata")
          .show()
        ;

        // Exibe os campos com os números de telefone
        //$("div.owner.block")
        //  .show()
        //;

        // Habilita a entrada do proprietário
        $("div.monitoringdata")
          .find('div.field')
          .removeClass("disabled")
          .removeClass("blocked")
        ;

        $("div.monitoringdata")
          .find("input[type='text']")
          .prop('readonly', false)
          .closest('div')
          .removeClass("readonly")
        ;

        // Habilita a seleção da empresa de monitoramento
        $("input[name='monitoringname']")
          .closest('div')
          .removeClass("disabled")
          .removeClass("readonly")
          .find('input.search')
          .prop('readonly', false)
        ;
        $("input[name='monitoringname']")
          .closest('div')
          .find('i.search.icon')
          .removeClass("hidden")
        ;
      } else {
        // Esconde os campos com os dados de monitoramento
        $("div.monitoringdata")
          .hide()
        ;

        // Esconde os campos com os números de telefone
        //$("div.owner.block")
        //  .show()
        //;

        // Desabilita a entrada dos dados de monitoramento
        $("div.monitoringdata")
          .find('div.field')
          .addClass("disabled")
          .addClass("blocked")
        ;

        $("div.monitoringdata")
          .find("input[type='text']")
          .prop('readonly', true)
          .closest('div')
          .addClass("readonly")
        ;

        // Desabilita a seleção da empresa de monitoramento
        $("input[name='monitoringname']")
          .closest('div')
          .addClass("disabled")
          .addClass("readonly")
          .find('input.search')
          .prop('readonly', true)
        ;
        $("input[name='monitoringname']")
          .closest('div')
          .find('i.search.icon')
          .addClass("hidden")
        ;
      }
    }

  </script>
  {% endapply %}
{% endblock scripts %}
